//
// File generated by /afs/rhic.bnl.gov/star/ROOT/5.34.09/.sl64_gcc447/rootdeb/bin/rootcint at Thu Apr  3 14:54:23 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME SplineFitDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "SplineFitDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TPoly3_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TPoly3(void *p = 0);
   static void *newArray_TPoly3(Long_t size, void *p);
   static void delete_TPoly3(void *p);
   static void deleteArray_TPoly3(void *p);
   static void destruct_TPoly3(void *p);
   static void streamer_TPoly3(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TPoly3*)
   {
      ::TPoly3 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TPoly3 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TPoly3", ::TPoly3::Class_Version(), "./TPoly3.h", 10,
                  typeid(::TPoly3), DefineBehavior(ptr, ptr),
                  &::TPoly3::Dictionary, isa_proxy, 0,
                  sizeof(::TPoly3) );
      instance.SetNew(&new_TPoly3);
      instance.SetNewArray(&newArray_TPoly3);
      instance.SetDelete(&delete_TPoly3);
      instance.SetDeleteArray(&deleteArray_TPoly3);
      instance.SetDestructor(&destruct_TPoly3);
      instance.SetStreamerFunc(&streamer_TPoly3);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TPoly3*)
   {
      return GenerateInitInstanceLocal((::TPoly3*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TPoly3*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TOnePadDisplay_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TOnePadDisplay(void *p = 0);
   static void *newArray_TOnePadDisplay(Long_t size, void *p);
   static void delete_TOnePadDisplay(void *p);
   static void deleteArray_TOnePadDisplay(void *p);
   static void destruct_TOnePadDisplay(void *p);
   static void streamer_TOnePadDisplay(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TOnePadDisplay*)
   {
      ::TOnePadDisplay *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TOnePadDisplay >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TOnePadDisplay", ::TOnePadDisplay::Class_Version(), "./TOnePadDisplay.h", 7,
                  typeid(::TOnePadDisplay), DefineBehavior(ptr, ptr),
                  &::TOnePadDisplay::Dictionary, isa_proxy, 0,
                  sizeof(::TOnePadDisplay) );
      instance.SetNew(&new_TOnePadDisplay);
      instance.SetNewArray(&newArray_TOnePadDisplay);
      instance.SetDelete(&delete_TOnePadDisplay);
      instance.SetDeleteArray(&deleteArray_TOnePadDisplay);
      instance.SetDestructor(&destruct_TOnePadDisplay);
      instance.SetStreamerFunc(&streamer_TOnePadDisplay);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TOnePadDisplay*)
   {
      return GenerateInitInstanceLocal((::TOnePadDisplay*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TOnePadDisplay*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TBandedLE_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TBandedLE(void *p = 0);
   static void *newArray_TBandedLE(Long_t size, void *p);
   static void delete_TBandedLE(void *p);
   static void deleteArray_TBandedLE(void *p);
   static void destruct_TBandedLE(void *p);
   static void streamer_TBandedLE(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TBandedLE*)
   {
      ::TBandedLE *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TBandedLE >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TBandedLE", ::TBandedLE::Class_Version(), "./TBandedLE.h", 6,
                  typeid(::TBandedLE), DefineBehavior(ptr, ptr),
                  &::TBandedLE::Dictionary, isa_proxy, 0,
                  sizeof(::TBandedLE) );
      instance.SetNew(&new_TBandedLE);
      instance.SetNewArray(&newArray_TBandedLE);
      instance.SetDelete(&delete_TBandedLE);
      instance.SetDeleteArray(&deleteArray_TBandedLE);
      instance.SetDestructor(&destruct_TBandedLE);
      instance.SetStreamerFunc(&streamer_TBandedLE);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TBandedLE*)
   {
      return GenerateInitInstanceLocal((::TBandedLE*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TBandedLE*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TZigZag_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TZigZag(void *p = 0);
   static void *newArray_TZigZag(Long_t size, void *p);
   static void delete_TZigZag(void *p);
   static void deleteArray_TZigZag(void *p);
   static void destruct_TZigZag(void *p);
   static void streamer_TZigZag(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TZigZag*)
   {
      ::TZigZag *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TZigZag >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TZigZag", ::TZigZag::Class_Version(), "./TZigZag.h", 7,
                  typeid(::TZigZag), DefineBehavior(ptr, ptr),
                  &::TZigZag::Dictionary, isa_proxy, 0,
                  sizeof(::TZigZag) );
      instance.SetNew(&new_TZigZag);
      instance.SetNewArray(&newArray_TZigZag);
      instance.SetDelete(&delete_TZigZag);
      instance.SetDeleteArray(&deleteArray_TZigZag);
      instance.SetDestructor(&destruct_TZigZag);
      instance.SetStreamerFunc(&streamer_TZigZag);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TZigZag*)
   {
      return GenerateInitInstanceLocal((::TZigZag*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TZigZag*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TSplineFit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSplineFit(void *p = 0);
   static void *newArray_TSplineFit(Long_t size, void *p);
   static void delete_TSplineFit(void *p);
   static void deleteArray_TSplineFit(void *p);
   static void destruct_TSplineFit(void *p);
   static void streamer_TSplineFit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSplineFit*)
   {
      ::TSplineFit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSplineFit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSplineFit", ::TSplineFit::Class_Version(), "./TSplineFit.h", 23,
                  typeid(::TSplineFit), DefineBehavior(ptr, ptr),
                  &::TSplineFit::Dictionary, isa_proxy, 0,
                  sizeof(::TSplineFit) );
      instance.SetNew(&new_TSplineFit);
      instance.SetNewArray(&newArray_TSplineFit);
      instance.SetDelete(&delete_TSplineFit);
      instance.SetDeleteArray(&deleteArray_TSplineFit);
      instance.SetDestructor(&destruct_TSplineFit);
      instance.SetStreamerFunc(&streamer_TSplineFit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSplineFit*)
   {
      return GenerateInitInstanceLocal((::TSplineFit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSplineFit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TPoly3::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TPoly3::Class_Name()
{
   return "TPoly3";
}

//______________________________________________________________________________
const char *TPoly3::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPoly3*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TPoly3::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TPoly3*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TPoly3::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPoly3*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TPoly3::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TPoly3*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TOnePadDisplay::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TOnePadDisplay::Class_Name()
{
   return "TOnePadDisplay";
}

//______________________________________________________________________________
const char *TOnePadDisplay::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TOnePadDisplay*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TOnePadDisplay::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TOnePadDisplay*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TOnePadDisplay::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TOnePadDisplay*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TOnePadDisplay::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TOnePadDisplay*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TBandedLE::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TBandedLE::Class_Name()
{
   return "TBandedLE";
}

//______________________________________________________________________________
const char *TBandedLE::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TBandedLE*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TBandedLE::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TBandedLE*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TBandedLE::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TBandedLE*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TBandedLE::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TBandedLE*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TZigZag::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TZigZag::Class_Name()
{
   return "TZigZag";
}

//______________________________________________________________________________
const char *TZigZag::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TZigZag*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TZigZag::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TZigZag*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TZigZag::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TZigZag*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TZigZag::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TZigZag*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSplineFit::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSplineFit::Class_Name()
{
   return "TSplineFit";
}

//______________________________________________________________________________
const char *TSplineFit::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSplineFit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSplineFit::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSplineFit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSplineFit::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSplineFit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSplineFit::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSplineFit*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TPoly3::Streamer(TBuffer &R__b)
{
   // Stream an object of class TPoly3.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b.ReadStaticArray((double*)fA);
      R__b.CheckByteCount(R__s, R__c, TPoly3::IsA());
   } else {
      R__c = R__b.WriteVersion(TPoly3::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b.WriteArray(fA, 4);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TPoly3::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TPoly3.
      TClass *R__cl = ::TPoly3::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fA[4]", fA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fN", &fN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fComp", &fComp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY0", &fY0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX1", &fX1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX2", &fX2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX3", &fX3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMin", &fMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXMin", &fXMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYMin", &fYMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMax", &fMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXMax", &fXMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYMax", &fYMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInfl", &fInfl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXInfl", &fXInfl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYInfl", &fYInfl);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TPoly3(void *p) {
      return  p ? new(p) ::TPoly3 : new ::TPoly3;
   }
   static void *newArray_TPoly3(Long_t nElements, void *p) {
      return p ? new(p) ::TPoly3[nElements] : new ::TPoly3[nElements];
   }
   // Wrapper around operator delete
   static void delete_TPoly3(void *p) {
      delete ((::TPoly3*)p);
   }
   static void deleteArray_TPoly3(void *p) {
      delete [] ((::TPoly3*)p);
   }
   static void destruct_TPoly3(void *p) {
      typedef ::TPoly3 current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TPoly3(TBuffer &buf, void *obj) {
      ((::TPoly3*)obj)->::TPoly3::Streamer(buf);
   }
} // end of namespace ROOT for class ::TPoly3

//______________________________________________________________________________
void TSplineFit::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSplineFit.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      void *ptr_fType = (void*)&fType;
      R__b >> *reinterpret_cast<Int_t*>(ptr_fType);
      R__b >> fCat;
      R__b >> fNbInFamily;
      R__b >> fM;
      R__b >> fMi;
      R__b >> fMl;
      R__b >> fN;
      R__b >> fNs2;
      R__b >> fSlope;
      R__b >> fCst;
      R__b >> fBoundedLow;
      R__b >> fLowBound;
      R__b >> fBoundedUp;
      R__b >> fUpBound;
      fX.Streamer(R__b);
      fKhi.Streamer(R__b);
      fMt.Streamer(R__b);
      fMv.Streamer(R__b);
      fMs.Streamer(R__b);
      R__b >> fUseForRandom;
      R__b >> fParameter;
      fParameterDef.Streamer(R__b);
      R__b >> fZigZag;
      fDate.Streamer(R__b);
      fSource.Streamer(R__b);
      fMacro.Streamer(R__b);
      fXLabel.Streamer(R__b);
      fYLabel.Streamer(R__b);
      fZLabel.Streamer(R__b);
      fVLabel.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, TSplineFit::IsA());
   } else {
      R__c = R__b.WriteVersion(TSplineFit::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << (Int_t)fType;
      R__b << fCat;
      R__b << fNbInFamily;
      R__b << fM;
      R__b << fMi;
      R__b << fMl;
      R__b << fN;
      R__b << fNs2;
      R__b << fSlope;
      R__b << fCst;
      R__b << fBoundedLow;
      R__b << fLowBound;
      R__b << fBoundedUp;
      R__b << fUpBound;
      fX.Streamer(R__b);
      fKhi.Streamer(R__b);
      fMt.Streamer(R__b);
      fMv.Streamer(R__b);
      fMs.Streamer(R__b);
      R__b << fUseForRandom;
      R__b << fParameter;
      fParameterDef.Streamer(R__b);
      R__b << fZigZag;
      fDate.Streamer(R__b);
      fSource.Streamer(R__b);
      fMacro.Streamer(R__b);
      fXLabel.Streamer(R__b);
      fYLabel.Streamer(R__b);
      fZLabel.Streamer(R__b);
      fVLabel.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TSplineFit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSplineFit.
      TClass *R__cl = ::TSplineFit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fType", &fType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCat", &fCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNbInFamily", &fNbInFamily);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fM", &fM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMi", &fMi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMl", &fMl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fN", &fN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNs2", &fNs2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSlope", &fSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCst", &fCst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBoundedLow", &fBoundedLow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLowBound", &fLowBound);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBoundedUp", &fBoundedUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUpBound", &fUpBound);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fA", &fA);
      R__insp.InspectMember(fA, "fA.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fB", &fB);
      R__insp.InspectMember(fB, "fB.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.InspectMember(fX, "fX.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fKhi", &fKhi);
      R__insp.InspectMember(fKhi, "fKhi.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMt", &fMt);
      R__insp.InspectMember(fMt, "fMt.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMv", &fMv);
      R__insp.InspectMember(fMv, "fMv.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMs", &fMs);
      R__insp.InspectMember(fMs, "fMs.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseForRandom", &fUseForRandom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParameter", &fParameter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParameterDef", &fParameterDef);
      R__insp.InspectMember(fParameterDef, "fParameterDef.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fZigZag", &fZigZag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDate", &fDate);
      R__insp.InspectMember(fDate, "fDate.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSource", &fSource);
      R__insp.InspectMember(fSource, "fSource.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMacro", &fMacro);
      R__insp.InspectMember(fMacro, "fMacro.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXLabel", &fXLabel);
      R__insp.InspectMember(fXLabel, "fXLabel.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYLabel", &fYLabel);
      R__insp.InspectMember(fYLabel, "fYLabel.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZLabel", &fZLabel);
      R__insp.InspectMember(fZLabel, "fZLabel.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVLabel", &fVLabel);
      R__insp.InspectMember(fVLabel, "fVLabel.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInterpolation", &fInterpolation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHGenRandom", &fHGenRandom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHShowRandom", &fHShowRandom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMemoryReduced", &fMemoryReduced);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProvidedName", &fProvidedName);
      R__insp.InspectMember(fProvidedName, "fProvidedName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSplineFitFunc", &fSplineFitFunc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPointsGraph", &fPointsGraph);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSplineGraph", &fSplineGraph);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPS", &fPS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "f2Drestored", &f2Drestored);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "f3Drestored", &f3Drestored);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fProvidedH1D", &fProvidedH1D);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fProvidedH2D", &fProvidedH2D);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fH2Dfit", &fH2Dfit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fProvidedH3D", &fProvidedH3D);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fH3Dfit", &fH3Dfit);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSplineFit(void *p) {
      return  p ? new(p) ::TSplineFit : new ::TSplineFit;
   }
   static void *newArray_TSplineFit(Long_t nElements, void *p) {
      return p ? new(p) ::TSplineFit[nElements] : new ::TSplineFit[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSplineFit(void *p) {
      delete ((::TSplineFit*)p);
   }
   static void deleteArray_TSplineFit(void *p) {
      delete [] ((::TSplineFit*)p);
   }
   static void destruct_TSplineFit(void *p) {
      typedef ::TSplineFit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TSplineFit(TBuffer &buf, void *obj) {
      ((::TSplineFit*)obj)->::TSplineFit::Streamer(buf);
   }
} // end of namespace ROOT for class ::TSplineFit

//______________________________________________________________________________
void TOnePadDisplay::Streamer(TBuffer &R__b)
{
   // Stream an object of class TOnePadDisplay.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> fCanvas;
      R__b >> fCanTopX;
      R__b >> fCanTopY;
      R__b >> fCanWidth;
      R__b >> fCanHeigth;
      R__b >> fCanColor;
      R__b >> fCanBsz;
      R__b >> fCanStyle;
      fCanDate.Streamer(R__b);
      R__b >> fPad;
      R__b >> fPadXlow;
      R__b >> fPadXup;
      R__b >> fPadYlow;
      R__b >> fPadYup;
      R__b >> fPadColor;
      R__b >> fPadBsz;
      R__b >> fPadStyle;
      R__b >> fPadLogX;
      R__b >> fPadLogY;
      R__b >> fFrameColor;
      R__b >> fStyleStat;
      R__b >> fStyleFont;
      R__b >> fStyleColor;
      R__b >> fStyleH;
      R__b >> fStyleW;
      R__b >> fStyleHistColor;
      R__b >> fStyleTXSize;
      R__b >> fStyleTYSize;
      R__b >> fStyleTitleH;
      R__b >> fStyleTitleW;
      R__b >> fStyleTitleX;
      R__b >> fStyleTXOffset;
      R__b >> fStyleTitleY;
      R__b >> fStyleTYOffset;
      R__b >> fStyleTBSize;
      R__b >> fStyleTitleFont;
      R__b >> fStyleTitleColor;
      R__b >> fStyleTFColor;
      R__b >> fStyleTTextColor;
      R__b >> fStyleLabelSize;
      //R__b.ReadArray(fStyleLabelAxis);
      R__b >> fTex1;
      fTextT1.Streamer(R__b);
      R__b >> fXTex1;
      R__b >> fYTex1;
      R__b >> fTex2;
      fTextT2.Streamer(R__b);
      R__b >> fXTex2;
      R__b >> fYTex2;
      R__b >> fTex3;
      fTextT3.Streamer(R__b);
      R__b >> fXTex3;
      R__b >> fYTex3;
      R__b >> fFontTex;
      R__b >> fSizeTex;
      R__b >> fWidthTex;
      R__b.CheckByteCount(R__s, R__c, TOnePadDisplay::IsA());
   } else {
      R__c = R__b.WriteVersion(TOnePadDisplay::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << fCanvas;
      R__b << fCanTopX;
      R__b << fCanTopY;
      R__b << fCanWidth;
      R__b << fCanHeigth;
      R__b << fCanColor;
      R__b << fCanBsz;
      R__b << fCanStyle;
      fCanDate.Streamer(R__b);
      R__b << fPad;
      R__b << fPadXlow;
      R__b << fPadXup;
      R__b << fPadYlow;
      R__b << fPadYup;
      R__b << fPadColor;
      R__b << fPadBsz;
      R__b << fPadStyle;
      R__b << fPadLogX;
      R__b << fPadLogY;
      R__b << fFrameColor;
      R__b << fStyleStat;
      R__b << fStyleFont;
      R__b << fStyleColor;
      R__b << fStyleH;
      R__b << fStyleW;
      R__b << fStyleHistColor;
      R__b << fStyleTXSize;
      R__b << fStyleTYSize;
      R__b << fStyleTitleH;
      R__b << fStyleTitleW;
      R__b << fStyleTitleX;
      R__b << fStyleTXOffset;
      R__b << fStyleTitleY;
      R__b << fStyleTYOffset;
      R__b << fStyleTBSize;
      R__b << fStyleTitleFont;
      R__b << fStyleTitleColor;
      R__b << fStyleTFColor;
      R__b << fStyleTTextColor;
      R__b << fStyleLabelSize;
      //R__b.WriteArray(fStyleLabelAxis, __COUNTER__);
      R__b << fTex1;
      fTextT1.Streamer(R__b);
      R__b << fXTex1;
      R__b << fYTex1;
      R__b << fTex2;
      fTextT2.Streamer(R__b);
      R__b << fXTex2;
      R__b << fYTex2;
      R__b << fTex3;
      fTextT3.Streamer(R__b);
      R__b << fXTex3;
      R__b << fYTex3;
      R__b << fFontTex;
      R__b << fSizeTex;
      R__b << fWidthTex;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TOnePadDisplay::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TOnePadDisplay.
      TClass *R__cl = ::TOnePadDisplay::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCanvas", &fCanvas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCanTopX", &fCanTopX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCanTopY", &fCanTopY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCanWidth", &fCanWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCanHeigth", &fCanHeigth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCanColor", &fCanColor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCanBsz", &fCanBsz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCanStyle", &fCanStyle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCanDate", &fCanDate);
      R__insp.InspectMember(fCanDate, "fCanDate.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPad", &fPad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadXlow", &fPadXlow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadXup", &fPadXup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadYlow", &fPadYlow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadYup", &fPadYup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadColor", &fPadColor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadBsz", &fPadBsz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadStyle", &fPadStyle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadLogX", &fPadLogX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadLogY", &fPadLogY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFrameColor", &fFrameColor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStyleStat", &fStyleStat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStyleFont", &fStyleFont);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStyleColor", &fStyleColor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStyleH", &fStyleH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStyleW", &fStyleW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStyleHistColor", &fStyleHistColor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStyleTXSize", &fStyleTXSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStyleTYSize", &fStyleTYSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStyleTitleH", &fStyleTitleH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStyleTitleW", &fStyleTitleW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStyleTitleX", &fStyleTitleX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStyleTXOffset", &fStyleTXOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStyleTitleY", &fStyleTitleY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStyleTYOffset", &fStyleTYOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStyleTBSize", &fStyleTBSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStyleTitleFont", &fStyleTitleFont);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStyleTitleColor", &fStyleTitleColor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStyleTFColor", &fStyleTFColor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStyleTTextColor", &fStyleTTextColor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStyleLabelSize", &fStyleLabelSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStyleLabelAxis", &fStyleLabelAxis);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTex1", &fTex1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTextT1", &fTextT1);
      R__insp.InspectMember(fTextT1, "fTextT1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXTex1", &fXTex1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYTex1", &fYTex1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTex2", &fTex2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTextT2", &fTextT2);
      R__insp.InspectMember(fTextT2, "fTextT2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXTex2", &fXTex2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYTex2", &fYTex2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTex3", &fTex3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTextT3", &fTextT3);
      R__insp.InspectMember(fTextT3, "fTextT3.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXTex3", &fXTex3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYTex3", &fYTex3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFontTex", &fFontTex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSizeTex", &fSizeTex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWidthTex", &fWidthTex);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TOnePadDisplay(void *p) {
      return  p ? new(p) ::TOnePadDisplay : new ::TOnePadDisplay;
   }
   static void *newArray_TOnePadDisplay(Long_t nElements, void *p) {
      return p ? new(p) ::TOnePadDisplay[nElements] : new ::TOnePadDisplay[nElements];
   }
   // Wrapper around operator delete
   static void delete_TOnePadDisplay(void *p) {
      delete ((::TOnePadDisplay*)p);
   }
   static void deleteArray_TOnePadDisplay(void *p) {
      delete [] ((::TOnePadDisplay*)p);
   }
   static void destruct_TOnePadDisplay(void *p) {
      typedef ::TOnePadDisplay current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TOnePadDisplay(TBuffer &buf, void *obj) {
      ((::TOnePadDisplay*)obj)->::TOnePadDisplay::Streamer(buf);
   }
} // end of namespace ROOT for class ::TOnePadDisplay

//______________________________________________________________________________
void TBandedLE::Streamer(TBuffer &R__b)
{
   // Stream an object of class TBandedLE.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fF;
      R__b >> fN;
      R__b >> fM;
      R__b >> fK;
      R__b >> fA;
      R__b >> fB;
      fX.Streamer(R__b);
      fV.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, TBandedLE::IsA());
   } else {
      R__c = R__b.WriteVersion(TBandedLE::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fF;
      R__b << fN;
      R__b << fM;
      R__b << fK;
      R__b << fA;
      R__b << fB;
      fX.Streamer(R__b);
      fV.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TBandedLE::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TBandedLE.
      TClass *R__cl = ::TBandedLE::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fF", &fF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fN", &fN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fM", &fM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fK", &fK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOwnA", &fOwnA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOwnB", &fOwnB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fA", &fA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fB", &fB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.InspectMember(fX, "fX.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fV", &fV);
      R__insp.InspectMember(fV, "fV.");
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TBandedLE(void *p) {
      return  p ? new(p) ::TBandedLE : new ::TBandedLE;
   }
   static void *newArray_TBandedLE(Long_t nElements, void *p) {
      return p ? new(p) ::TBandedLE[nElements] : new ::TBandedLE[nElements];
   }
   // Wrapper around operator delete
   static void delete_TBandedLE(void *p) {
      delete ((::TBandedLE*)p);
   }
   static void deleteArray_TBandedLE(void *p) {
      delete [] ((::TBandedLE*)p);
   }
   static void destruct_TBandedLE(void *p) {
      typedef ::TBandedLE current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TBandedLE(TBuffer &buf, void *obj) {
      ((::TBandedLE*)obj)->::TBandedLE::Streamer(buf);
   }
} // end of namespace ROOT for class ::TBandedLE

//______________________________________________________________________________
void TZigZag::Streamer(TBuffer &R__b)
{
   // Stream an object of class TZigZag.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fDim;
      R__b >> fNx;
      R__b >> fNy;
      R__b >> fNz;
      R__b >> fXmin;
      R__b >> fYmin;
      R__b >> fZmin;
      R__b >> fXmax;
      R__b >> fYmax;
      R__b >> fZmax;
      R__b.CheckByteCount(R__s, R__c, TZigZag::IsA());
   } else {
      R__c = R__b.WriteVersion(TZigZag::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fDim;
      R__b << fNx;
      R__b << fNy;
      R__b << fNz;
      R__b << fXmin;
      R__b << fYmin;
      R__b << fZmin;
      R__b << fXmax;
      R__b << fYmax;
      R__b << fZmax;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TZigZag::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TZigZag.
      TClass *R__cl = ::TZigZag::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDim", &fDim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNx", &fNx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNy", &fNy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNz", &fNz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXmin", &fXmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYmin", &fYmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZmin", &fZmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXmax", &fXmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYmax", &fYmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZmax", &fZmax);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TZigZag(void *p) {
      return  p ? new(p) ::TZigZag : new ::TZigZag;
   }
   static void *newArray_TZigZag(Long_t nElements, void *p) {
      return p ? new(p) ::TZigZag[nElements] : new ::TZigZag[nElements];
   }
   // Wrapper around operator delete
   static void delete_TZigZag(void *p) {
      delete ((::TZigZag*)p);
   }
   static void deleteArray_TZigZag(void *p) {
      delete [] ((::TZigZag*)p);
   }
   static void destruct_TZigZag(void *p) {
      typedef ::TZigZag current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TZigZag(TBuffer &buf, void *obj) {
      ((::TZigZag*)obj)->::TZigZag::Streamer(buf);
   }
} // end of namespace ROOT for class ::TZigZag

/********************************************************
* SplineFitDict.cpp
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableSplineFitDict();

extern "C" void G__set_cpp_environmentSplineFitDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("TOFrPicoDst.h");
  G__add_compiledheader("PVPDPicoDst.h");
  G__add_compiledheader("StartPicoDst.h");
  G__add_compiledheader("TOTPicoDst.h");
  G__add_compiledheader("ZPicoDst.h");
  G__add_compiledheader("DelayPicoDst.h");
  G__add_compiledheader("TPoly3.h");
  G__add_compiledheader("TOnePadDisplay.h");
  G__add_compiledheader("TBandedLE.h");
  G__add_compiledheader("TZigZag.h");
  G__add_compiledheader("TSplineFit.h");
  G__cpp_reset_tagtableSplineFitDict();
}
#include <new>
extern "C" int G__cpp_dllrevSplineFitDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TPoly3 */
static int G__SplineFitDict_548_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPoly3* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPoly3[n];
     } else {
       p = new((void*) gvp) TPoly3[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TPoly3;
     } else {
       p = new((void*) gvp) TPoly3;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TPoly3));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_548_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPoly3* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TPoly3(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) TPoly3(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TPoly3));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_548_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPoly3* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TPoly3((Double_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TPoly3((Double_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TPoly3));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_548_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((TPoly3*) G__getstructoffset())->Degree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_548_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPoly3*) G__getstructoffset())->Extrema();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_548_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TPoly3*) G__getstructoffset())->Integral((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_548_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPoly3*) G__getstructoffset())->Set((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_548_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPoly3*) G__getstructoffset())->Set((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_548_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((TPoly3*) G__getstructoffset())->Solution(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Bool_t*) G__Boolref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_548_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TPoly3*) G__getstructoffset())->Solve((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TPoly3*) G__getstructoffset())->Solve();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_548_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 115, (long) ((TPoly3*) G__getstructoffset())->Solve(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Bool_t*) G__Boolref(&libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 115, (long) ((TPoly3*) G__getstructoffset())->Solve(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Bool_t*) G__Boolref(&libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_548_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((TPoly3*) G__getstructoffset())->SolveLeft(*(Double_t*) G__Doubleref(&libp->para[0]), (Double_t) G__double(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((TPoly3*) G__getstructoffset())->SolveLeft(*(Double_t*) G__Doubleref(&libp->para[0]), (Double_t) G__double(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((TPoly3*) G__getstructoffset())->SolveLeft(*(Double_t*) G__Doubleref(&libp->para[0]), (Double_t) G__double(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((TPoly3*) G__getstructoffset())->SolveLeft(*(Double_t*) G__Doubleref(&libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((TPoly3*) G__getstructoffset())->SolveLeft(*(Double_t*) G__Doubleref(&libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_548_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((TPoly3*) G__getstructoffset())->SolveRight(*(Double_t*) G__Doubleref(&libp->para[0]), (Double_t) G__double(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((TPoly3*) G__getstructoffset())->SolveRight(*(Double_t*) G__Doubleref(&libp->para[0]), (Double_t) G__double(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((TPoly3*) G__getstructoffset())->SolveRight(*(Double_t*) G__Doubleref(&libp->para[0]), (Double_t) G__double(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((TPoly3*) G__getstructoffset())->SolveRight(*(Double_t*) G__Doubleref(&libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((TPoly3*) G__getstructoffset())->SolveRight(*(Double_t*) G__Doubleref(&libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_548_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TPoly3*) G__getstructoffset())->Y((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_548_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TPoly3::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_548_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPoly3::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_548_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TPoly3::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_548_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TPoly3::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_548_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TPoly3*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_548_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPoly3::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_548_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPoly3::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_548_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TPoly3::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_548_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TPoly3::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SplineFitDict_548_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TPoly3* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TPoly3(*(TPoly3*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TPoly3));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TPoly3 G__TTPoly3;
static int G__SplineFitDict_548_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TPoly3*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TPoly3*) (soff+(sizeof(TPoly3)*i)))->~G__TTPoly3();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TPoly3*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TPoly3*) (soff))->~G__TTPoly3();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SplineFitDict_548_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TPoly3* dest = (TPoly3*) G__getstructoffset();
   *dest = *(TPoly3*) libp->para[0].ref;
   const TPoly3& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TOnePadDisplay */
static int G__SplineFitDict_610_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TOnePadDisplay* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TOnePadDisplay[n];
     } else {
       p = new((void*) gvp) TOnePadDisplay[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TOnePadDisplay;
     } else {
       p = new((void*) gvp) TOnePadDisplay;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TOnePadDisplay));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_610_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TOnePadDisplay* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TOnePadDisplay(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) TOnePadDisplay(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TOnePadDisplay));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_610_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TOnePadDisplay* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TOnePadDisplay(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TOnePadDisplay(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TOnePadDisplay(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TOnePadDisplay(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TOnePadDisplay));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_610_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TOnePadDisplay* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TOnePadDisplay(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TOnePadDisplay(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TOnePadDisplay(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TOnePadDisplay(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TOnePadDisplay));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_610_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TOnePadDisplay* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TOnePadDisplay(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) TOnePadDisplay(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TOnePadDisplay(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TOnePadDisplay(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TOnePadDisplay));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_610_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TOnePadDisplay*) G__getstructoffset())->BookCanvas();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_610_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TOnePadDisplay*) G__getstructoffset())->BookLabels();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_610_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TOnePadDisplay*) G__getstructoffset())->DrawLabels();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_610_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TOnePadDisplay*) G__getstructoffset())->NewLabel1((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_610_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TOnePadDisplay*) G__getstructoffset())->NewLabel2((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_610_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TOnePadDisplay*) G__getstructoffset())->NewLabel3((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_610_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TOnePadDisplay*) G__getstructoffset())->NewLabel12((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_610_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TOnePadDisplay*) G__getstructoffset())->NewLabels((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_610_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TOnePadDisplay*) G__getstructoffset())->SetSmall();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_610_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TOnePadDisplay::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_610_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TOnePadDisplay::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_610_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TOnePadDisplay::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_610_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TOnePadDisplay::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_610_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TOnePadDisplay*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_610_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TOnePadDisplay::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_610_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TOnePadDisplay::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_610_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TOnePadDisplay::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_610_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TOnePadDisplay::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SplineFitDict_610_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TOnePadDisplay* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TOnePadDisplay(*(TOnePadDisplay*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TOnePadDisplay));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TOnePadDisplay G__TTOnePadDisplay;
static int G__SplineFitDict_610_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TOnePadDisplay*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TOnePadDisplay*) (soff+(sizeof(TOnePadDisplay)*i)))->~G__TTOnePadDisplay();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TOnePadDisplay*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TOnePadDisplay*) (soff))->~G__TTOnePadDisplay();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SplineFitDict_610_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TOnePadDisplay* dest = (TOnePadDisplay*) G__getstructoffset();
   *dest = *(TOnePadDisplay*) libp->para[0].ref;
   const TOnePadDisplay& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TBandedLE */
static int G__SplineFitDict_675_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TBandedLE* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TBandedLE[n];
     } else {
       p = new((void*) gvp) TBandedLE[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TBandedLE;
     } else {
       p = new((void*) gvp) TBandedLE;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TBandedLE));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_675_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TBandedLE* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TBandedLE(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *(TMatrixD*) libp->para[3].ref
, *(TMatrixD*) libp->para[4].ref, (Bool_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) TBandedLE(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *(TMatrixD*) libp->para[3].ref
, *(TMatrixD*) libp->para[4].ref, (Bool_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TBandedLE(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *(TMatrixD*) libp->para[3].ref
, *(TMatrixD*) libp->para[4].ref);
     } else {
       p = new((void*) gvp) TBandedLE(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *(TMatrixD*) libp->para[3].ref
, *(TMatrixD*) libp->para[4].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TBandedLE));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_675_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TBandedLE* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TBandedLE(
*(TMatrixD*) libp->para[0].ref, *(TMatrixD*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TBandedLE(
*(TMatrixD*) libp->para[0].ref, *(TMatrixD*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TBandedLE(
*(TMatrixD*) libp->para[0].ref, *(TMatrixD*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TBandedLE(
*(TMatrixD*) libp->para[0].ref, *(TMatrixD*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TBandedLE));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_675_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TBandedLE* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TBandedLE(
*(TMatrixD*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TBandedLE(
*(TMatrixD*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TBandedLE(*(TMatrixD*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TBandedLE(*(TMatrixD*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TBandedLE));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_675_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TBandedLE*) G__getstructoffset())->GetfA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_675_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TBandedLE*) G__getstructoffset())->GetfB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_675_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TBandedLE*) G__getstructoffset())->GetfF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_675_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TBandedLE*) G__getstructoffset())->GetfK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_675_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TBandedLE*) G__getstructoffset())->GetfM());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_675_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TBandedLE*) G__getstructoffset())->GetfN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_675_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TBandedLE*) G__getstructoffset())->Solve());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_675_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TBandedLE*) G__getstructoffset())->Verify());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_675_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TBandedLE::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_675_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TBandedLE::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_675_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TBandedLE::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_675_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TBandedLE::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_675_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TBandedLE*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_675_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TBandedLE::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_675_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TBandedLE::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_675_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TBandedLE::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_675_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TBandedLE::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SplineFitDict_675_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TBandedLE* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TBandedLE(*(TBandedLE*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TBandedLE));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TBandedLE G__TTBandedLE;
static int G__SplineFitDict_675_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TBandedLE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TBandedLE*) (soff+(sizeof(TBandedLE)*i)))->~G__TTBandedLE();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TBandedLE*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TBandedLE*) (soff))->~G__TTBandedLE();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SplineFitDict_675_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TBandedLE* dest = (TBandedLE*) G__getstructoffset();
   *dest = *(TBandedLE*) libp->para[0].ref;
   const TBandedLE& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TZigZag */
static int G__SplineFitDict_676_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TZigZag* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TZigZag[n];
     } else {
       p = new((void*) gvp) TZigZag[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TZigZag;
     } else {
       p = new((void*) gvp) TZigZag;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TZigZag));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TZigZag* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TZigZag(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) TZigZag(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TZigZag));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TZigZag* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 6
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TZigZag(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
   } else {
     p = new((void*) gvp) TZigZag(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TZigZag));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TZigZag* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 9
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TZigZag(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]));
   } else {
     p = new((void*) gvp) TZigZag(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TZigZag));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TZigZag* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TZigZag(*(TZigZag*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TZigZag(*(TZigZag*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TZigZag));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TZigZag*) G__getstructoffset())->GetNx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TZigZag*) G__getstructoffset())->GetNy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TZigZag*) G__getstructoffset())->GetNz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TZigZag*) G__getstructoffset())->GetXmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TZigZag*) G__getstructoffset())->GetXmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TZigZag*) G__getstructoffset())->GetYmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TZigZag*) G__getstructoffset())->GetYmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TZigZag*) G__getstructoffset())->GetZmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TZigZag*) G__getstructoffset())->GetZmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TZigZag*) G__getstructoffset())->IsInside(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TZigZag*) G__getstructoffset())->IsInside(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Double_t) G__double(libp->para[14])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TZigZag*) G__getstructoffset())->NearestPoints((Double_t) G__double(libp->para[0]), *(TArrayI*) libp->para[1].ref
, *(TArrayD*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TZigZag*) G__getstructoffset())->NearestPoints((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), *(TArrayI*) libp->para[3].ref
, *(TArrayD*) libp->para[4].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TZigZag*) G__getstructoffset())->NToZZ((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TZigZag*) G__getstructoffset())->NToZZ((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TZigZag*) G__getstructoffset())->NToZZ((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TZigZag*) G__getstructoffset())->Order((Int_t) G__int(libp->para[0]), *(TArrayI*) libp->para[1].ref
, *(TArrayD*) libp->para[2].ref, *(TArrayD*) libp->para[3].ref
, *(TArrayD*) libp->para[4].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TZigZag*) G__getstructoffset())->PointsNear((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(TArrayD*) libp->para[3].ref
, *(TArrayD*) libp->para[4].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TZigZag*) G__getstructoffset())->T((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TZigZag*) G__getstructoffset())->TMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TZigZag::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TZigZag::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TZigZag::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TZigZag::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TZigZag*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TZigZag::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TZigZag::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TZigZag::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_676_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TZigZag::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TZigZag G__TTZigZag;
static int G__SplineFitDict_676_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TZigZag*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TZigZag*) (soff+(sizeof(TZigZag)*i)))->~G__TTZigZag();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TZigZag*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TZigZag*) (soff))->~G__TTZigZag();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SplineFitDict_676_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TZigZag* dest = (TZigZag*) G__getstructoffset();
   *dest = *(TZigZag*) libp->para[0].ref;
   const TZigZag& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSplineFit */
static int G__SplineFitDict_732_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSplineFit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit[n];
     } else {
       p = new((void*) gvp) TSplineFit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit;
     } else {
       p = new((void*) gvp) TSplineFit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSplineFit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 15:
     //m: 15
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Bool_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Bool_t) G__int(libp->para[14]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Bool_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Bool_t) G__int(libp->para[14]));
     }
     break;
   case 14:
     //m: 14
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Bool_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Bool_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13]));
     }
     break;
   case 13:
     //m: 13
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Bool_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Bool_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]));
     }
     break;
   case 12:
     //m: 12
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Bool_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Bool_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11]));
     }
     break;
   case 11:
     //m: 11
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Bool_t) G__int(libp->para[10]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Bool_t) G__int(libp->para[10]));
     }
     break;
   case 10:
     //m: 10
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]), (Double_t) G__double(libp->para[9]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]), (Double_t) G__double(libp->para[9]));
     }
     break;
   case 9:
     //m: 9
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]));
     }
     break;
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSplineFit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSplineFit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 12:
     //m: 12
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TGraphErrors*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Bool_t) G__int(libp->para[11]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TGraphErrors*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Bool_t) G__int(libp->para[11]));
     }
     break;
   case 11:
     //m: 11
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TGraphErrors*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TGraphErrors*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]));
     }
     break;
   case 10:
     //m: 10
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TGraphErrors*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TGraphErrors*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9]));
     }
     break;
   case 9:
     //m: 9
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TGraphErrors*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TGraphErrors*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]));
     }
     break;
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TGraphErrors*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TGraphErrors*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TGraphErrors*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TGraphErrors*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TGraphErrors*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TGraphErrors*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TGraphErrors*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TGraphErrors*) G__int(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSplineFit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 10:
     //m: 10
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH1D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Bool_t) G__int(libp->para[9]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH1D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Bool_t) G__int(libp->para[9]));
     }
     break;
   case 9:
     //m: 9
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH1D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH1D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]));
     }
     break;
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH1D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH1D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH1D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH1D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH1D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH1D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH1D*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH1D*) G__int(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSplineFit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(TH1D*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7]));
     } else {
       p = new((void*) gvp) TSplineFit(
(TH1D*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(TH1D*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) TSplineFit(
(TH1D*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(TH1D*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) TSplineFit(
(TH1D*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(TH1D*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) TSplineFit(
(TH1D*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(TH1D*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TSplineFit(
(TH1D*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(TH1D*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TSplineFit(
(TH1D*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSplineFit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 10:
     //m: 10
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH2D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Bool_t) G__int(libp->para[9]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH2D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Bool_t) G__int(libp->para[9]));
     }
     break;
   case 9:
     //m: 9
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH2D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH2D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]));
     }
     break;
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH2D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH2D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH2D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH2D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH2D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH2D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH2D*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH2D*) G__int(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSplineFit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 10:
     //m: 10
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH3D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Bool_t) G__int(libp->para[9]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH3D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Bool_t) G__int(libp->para[9]));
     }
     break;
   case 9:
     //m: 9
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH3D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH3D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]));
     }
     break;
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH3D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH3D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Bool_t) G__int(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH3D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH3D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH3D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH3D*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH3D*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TSplineFit(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (TH3D*) G__int(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSplineFit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TSplineFit(*(TSplineFit*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TSplineFit(*(TSplineFit*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSplineFit::AddNumbering((Int_t) G__int(libp->para[0]), *(TString*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSplineFit*) G__getstructoffset())->BelongsToFamily((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Text_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) TSplineFit::CheckHistErrors((TH1*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) TSplineFit::CheckHistErrors((TH1*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((const TSplineFit*) G__getstructoffset())->Chi2((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const TSplineFit*) G__getstructoffset())->Chi2());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TSplineFit*) G__getstructoffset())->DrawData((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TSplineFit*) G__getstructoffset())->DrawData();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((TSplineFit*) G__getstructoffset())->DrawFit((Option_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((TSplineFit*) G__getstructoffset())->DrawFit((Option_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TSplineFit*) G__getstructoffset())->DrawFit((Option_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TSplineFit*) G__getstructoffset())->DrawFit((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TSplineFit*) G__getstructoffset())->DrawFit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSplineFit::DrawFitsInCollection();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSplineFit::DrawFitsInFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((TSplineFit*) G__getstructoffset())->DrawHere((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TSplineFit*) G__getstructoffset())->DrawHere((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TSplineFit*) G__getstructoffset())->DrawHere();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TSplineFit*) G__getstructoffset())->DrawHisto((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TSplineFit*) G__getstructoffset())->DrawHisto();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSplineFit::DrawNextInCollection();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSplineFit*) G__getstructoffset())->ErrorsFromFit();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((TSplineFit*) G__getstructoffset())->FillGraphs((Int_t) G__int(libp->para[0]), (Color_t) G__int(libp->para[1])
, (Style_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TSplineFit*) G__getstructoffset())->FillGraphs((Int_t) G__int(libp->para[0]), (Color_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TSplineFit*) G__getstructoffset())->FillGraphs((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TSplineFit*) G__getstructoffset())->FillGraphs();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((TSplineFit*) G__getstructoffset())->FillH2D3D((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((TSplineFit*) G__getstructoffset())->FillH2D3D((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((TSplineFit*) G__getstructoffset())->FillH2D3D((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((TSplineFit*) G__getstructoffset())->FillH2D3D());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) TSplineFit::FindFit((const Text_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) TSplineFit::FindFit((const Text_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) TSplineFit::FindFit((const Text_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TSplineFit*) G__getstructoffset())->FindFirstInFamily(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSplineFit::FindFirstInFamily((const Text_t*) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSplineFit::FindFitInFamily((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSplineFit*) G__getstructoffset())->GetCategory());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSplineFit*) G__getstructoffset())->GetCst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSplineFit*) G__getstructoffset())->GetDataFromHist((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSplineFit*) G__getstructoffset())->GetDate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSplineFit*) G__getstructoffset())->GetFamilyName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TSplineFit*) G__getstructoffset())->GetHistGen());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TSplineFit*) G__getstructoffset())->GetHistShow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TSplineFit*) G__getstructoffset())->GetKindOfFit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSplineFit*) G__getstructoffset())->GetLowBound(*(Double_t*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSplineFit*) G__getstructoffset())->GetMacro());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSplineFit*) G__getstructoffset())->GetMeasErr((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSplineFit*) G__getstructoffset())->GetMeasT((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSplineFit*) G__getstructoffset())->GetMeasV((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSplineFit*) G__getstructoffset())->GetNbOfMeas());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSplineFit*) G__getstructoffset())->GetNbOfMeasLast());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSplineFit*) G__getstructoffset())->GetNbOfMeasSpline());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSplineFit*) G__getstructoffset())->GetNbOfSplines());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSplineFit*) G__getstructoffset())->GetParameter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((TSplineFit*) G__getstructoffset())->GetParameterDef());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSplineFit*) G__getstructoffset())->GetPosInFamily());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSplineFit*) G__getstructoffset())->GetProvidedName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSplineFit*) G__getstructoffset())->GetRandom());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TSplineFit*) G__getstructoffset())->GetRandom((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSplineFit*) G__getstructoffset())->GetSlope());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSplineFit*) G__getstructoffset())->GetSource());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSplineFit*) G__getstructoffset())->GetSpline((Int_t) G__int(libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSplineFit*) G__getstructoffset())->GetSpline((Double_t) G__double(libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSplineFit*) G__getstructoffset())->GetSplineNN((Int_t) G__int(libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSplineFit*) G__getstructoffset())->GetSplineNN((Double_t) G__double(libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSplineFit*) G__getstructoffset())->GetUpBound(*(Double_t*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSplineFit*) G__getstructoffset())->GetVLabel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSplineFit*) G__getstructoffset())->GetXLabel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSplineFit*) G__getstructoffset())->GetXLowInterval((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSplineFit*) G__getstructoffset())->GetXmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSplineFit*) G__getstructoffset())->GetXmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSplineFit*) G__getstructoffset())->GetXUpInterval((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSplineFit*) G__getstructoffset())->GetYLabel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const TSplineFit*) G__getstructoffset())->GetZLabel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSplineFit::InitStatic();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TSplineFit*) G__getstructoffset())->Integral((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSplineFit*) G__getstructoffset())->IsInCollection());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) TSplineFit::IsInCollection((TSplineFit*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TSplineFit*) G__getstructoffset())->LoadFamily());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSplineFit::LoadFamily((const Text_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TSplineFit*) G__getstructoffset())->MinMax(*(Bool_t*) G__Boolref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Bool_t*) G__Boolref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSplineFit::MultinomialAsWeight((TH1*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      TSplineFit::NameFile((Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      TSplineFit::NameFile();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      TSplineFit::NameProg((Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      TSplineFit::NameProg();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      TSplineFit::NameWeb((Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      TSplineFit::NameWeb();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) TSplineFit::OrderFile((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) TSplineFit::OrderFile());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TSplineFit*) G__getstructoffset())->Pedestal((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSplineFit*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSplineFit::Purge();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSplineFit::PurgeStatic();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((TSplineFit*) G__getstructoffset())->RedoFit((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((TSplineFit*) G__getstructoffset())->RedoFit());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSplineFit*) G__getstructoffset())->ReduceMemory();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSplineFit::RemoveDisplay();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) TSplineFit::RemoveFitFromFile((Text_t*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) TSplineFit::RemoveFitFromFile((Text_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSplineFit*) G__getstructoffset())->SetDefaultLabels();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSplineFit*) G__getstructoffset())->SetMacro((Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSplineFit*) G__getstructoffset())->SetMeasErr((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSplineFit*) G__getstructoffset())->SetMeasX((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSplineFit*) G__getstructoffset())->SetMeasY((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_121(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSplineFit*) G__getstructoffset())->SetParameter((Double_t) G__double(libp->para[0]), (Text_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_122(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSplineFit*) G__getstructoffset())->SetSource((Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSplineFit*) G__getstructoffset())->SetVLabel((Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_124(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSplineFit*) G__getstructoffset())->SetXLabel((Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_125(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSplineFit*) G__getstructoffset())->SetYLabel((Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_126(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSplineFit*) G__getstructoffset())->SetZLabel((Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_127(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSplineFit::ShowFitsInFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_128(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TSplineFit*) G__getstructoffset())->ShowRandom();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_129(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((TSplineFit*) G__getstructoffset())->SolveLeft(*(Double_t*) G__Doubleref(&libp->para[0]), (Double_t) G__double(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((TSplineFit*) G__getstructoffset())->SolveLeft(*(Double_t*) G__Doubleref(&libp->para[0]), (Double_t) G__double(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((TSplineFit*) G__getstructoffset())->SolveLeft(*(Double_t*) G__Doubleref(&libp->para[0]), (Double_t) G__double(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((TSplineFit*) G__getstructoffset())->SolveLeft(*(Double_t*) G__Doubleref(&libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((TSplineFit*) G__getstructoffset())->SolveLeft(*(Double_t*) G__Doubleref(&libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_130(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((TSplineFit*) G__getstructoffset())->UpdateFile((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((TSplineFit*) G__getstructoffset())->UpdateFile());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_131(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((TSplineFit*) G__getstructoffset())->UseForRandom((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((TSplineFit*) G__getstructoffset())->UseForRandom());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_132(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSplineFit*) G__getstructoffset())->V((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_133(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSplineFit*) G__getstructoffset())->V((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_134(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TSplineFit*) G__getstructoffset())->V((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_135(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TSplineFit*) G__getstructoffset())->V((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_136(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TSplineFit*) G__getstructoffset())->VerifyNotInFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_137(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSplineFit*) G__getstructoffset())->XNorm((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_138(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) TSplineFit::XpowerM((Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_139(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TSplineFit*) G__getstructoffset())->XUser((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_140(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSplineFit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_141(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSplineFit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_142(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSplineFit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_143(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSplineFit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_147(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSplineFit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_148(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSplineFit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_149(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSplineFit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_150(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSplineFit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SplineFitDict_732_0_151(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSplineFit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSplineFit G__TTSplineFit;
static int G__SplineFitDict_732_0_152(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSplineFit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSplineFit*) (soff+(sizeof(TSplineFit)*i)))->~G__TTSplineFit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSplineFit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSplineFit*) (soff))->~G__TTSplineFit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SplineFitDict_732_0_153(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSplineFit* dest = (TSplineFit*) G__getstructoffset();
   *dest = *(TSplineFit*) libp->para[0].ref;
   const TSplineFit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TPoly3 */

/* TOnePadDisplay */

/* TBandedLE */

/* TZigZag */

/* TSplineFit */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncSplineFitDict {
 public:
  G__Sizep2memfuncSplineFitDict(): p(&G__Sizep2memfuncSplineFitDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncSplineFitDict::*p)();
};

size_t G__get_sizep2memfuncSplineFitDict()
{
  G__Sizep2memfuncSplineFitDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceSplineFitDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SplineFitDictLN_TPoly3))) {
     TPoly3 *G__Lderived;
     G__Lderived=(TPoly3*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SplineFitDictLN_TPoly3),G__get_linked_tagnum(&G__SplineFitDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SplineFitDictLN_TOnePadDisplay))) {
     TOnePadDisplay *G__Lderived;
     G__Lderived=(TOnePadDisplay*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SplineFitDictLN_TOnePadDisplay),G__get_linked_tagnum(&G__SplineFitDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SplineFitDictLN_TOnePadDisplay),G__get_linked_tagnum(&G__SplineFitDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SplineFitDictLN_TBandedLE))) {
     TBandedLE *G__Lderived;
     G__Lderived=(TBandedLE*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SplineFitDictLN_TBandedLE),G__get_linked_tagnum(&G__SplineFitDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SplineFitDictLN_TZigZag))) {
     TZigZag *G__Lderived;
     G__Lderived=(TZigZag*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SplineFitDictLN_TZigZag),G__get_linked_tagnum(&G__SplineFitDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit))) {
     TSplineFit *G__Lderived;
     G__Lderived=(TSplineFit*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit),G__get_linked_tagnum(&G__SplineFitDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit),G__get_linked_tagnum(&G__SplineFitDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableSplineFitDict() {

   /* Setting up typedef entry */
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Text_t",99,-1,0,-1);
   G__setnewtype(-1,"General string (char)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("Style_t",115,-1,0,-1);
   G__setnewtype(-1,"Style number (short)",0);
   G__search_typename2("Color_t",115,-1,0,-1);
   G__setnewtype(-1,"Color number (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__SplineFitDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SplineFitDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SplineFitDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SplineFitDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SplineFitDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__SplineFitDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SplineFitDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SplineFitDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SplineFitDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SplineFitDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SplineFitDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SplineFitDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__SplineFitDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__SplineFitDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__SplineFitDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__SplineFitDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__SplineFitDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__SplineFitDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__SplineFitDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<UInt_t,Int_t>",117,G__get_linked_tagnum(&G__SplineFitDictLN_pairlEunsignedsPintcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__SplineFitDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__SplineFitDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SplineFitDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SplineFitDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SplineFitDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SplineFitDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<unsigned int,int> >",117,G__get_linked_tagnum(&G__SplineFitDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__SplineFitDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__SplineFitDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixD",117,G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__SplineFitDictLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__SplineFitDictLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSym<Double_t>",117,G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTSymlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparse<Double_t>",117,G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTSparselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TPoly3 */
static void G__setup_memvarTPoly3(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SplineFitDictLN_TPoly3));
   { TPoly3 *p; p=(TPoly3*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fA[4]=",0,"Coefficients of the polynom");
   G__memvar_setup((void*)((long)(&p->fN)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"fN=",0,"! True degree of polynom. -1 if not solved!");
   G__memvar_setup((void*)((long)(&p->fComp)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"fComp=",0,"! True if there are 2 complex solutions");
   G__memvar_setup((void*)((long)(&p->fY0)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fY0=",0,"! Value of y0 in y0 = fA[0] + fA[1]*x + fA[2]*x^2 + fA[3]*x^3 for which problem was solved");
   G__memvar_setup((void*)((long)(&p->fX1)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fX1=",0,"! First solution, always real");
   G__memvar_setup((void*)((long)(&p->fX2)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fX2=",0,"! 2nd solution, if real. Else real part of second complex solution");
   G__memvar_setup((void*)((long)(&p->fX3)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fX3=",0,"! 3rd solution, if real. Else im part of 2nd solution or minus im part of 3rd solution");
   G__memvar_setup((void*)((long)(&p->fMin)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"fMin=",0,"! True if there is a minimum");
   G__memvar_setup((void*)((long)(&p->fXMin)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fXMin=",0,"! Value of x at minimum, if any");
   G__memvar_setup((void*)((long)(&p->fYMin)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fYMin=",0,"! Value of y at minimum, if any");
   G__memvar_setup((void*)((long)(&p->fMax)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"fMax=",0,"! True if there is a maximum");
   G__memvar_setup((void*)((long)(&p->fXMax)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fXMax=",0,"! Value of x at maximum, if any");
   G__memvar_setup((void*)((long)(&p->fYMax)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fYMax=",0,"! Value of y at maximum, if any");
   G__memvar_setup((void*)((long)(&p->fInfl)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"fInfl=",0,"! True if there is an inflection point");
   G__memvar_setup((void*)((long)(&p->fXInfl)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fXInfl=",0,"! Value of x at inflexion point");
   G__memvar_setup((void*)((long)(&p->fYInfl)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fYInfl=",0,"! Value of y at inflexion point");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TOnePadDisplay */
static void G__setup_memvarTOnePadDisplay(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SplineFitDictLN_TOnePadDisplay));
   { TOnePadDisplay *p; p=(TOnePadDisplay*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fCanvas)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TCanvas),-1,-1,1,"fCanvas=",0,"Main canvas");
   G__memvar_setup((void*)((long)(&p->fCanTopX)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fCanTopX=",0,"top x  of general canvas fCanvas");
   G__memvar_setup((void*)((long)(&p->fCanTopY)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fCanTopY=",0,"top y  of general canvas fCanvas");
   G__memvar_setup((void*)((long)(&p->fCanWidth)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fCanWidth=",0,"width  of general canvas fCanvas");
   G__memvar_setup((void*)((long)(&p->fCanHeigth)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fCanHeigth=",0,"heigth of general canvas fCanvas");
   G__memvar_setup((void*)((long)(&p->fCanColor)-(long)(p)),115,0,0,-1,G__defined_typename("Color_t"),-1,1,"fCanColor=",0,"color  of general canvas fCanvas");
   G__memvar_setup((void*)((long)(&p->fCanBsz)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"fCanBsz=",0,"border size of main canvas fCanvas");
   G__memvar_setup((void*)((long)(&p->fCanStyle)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"fCanStyle=",0,"style of canvas");
   G__memvar_setup((void*)((long)(&p->fCanDate)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TString),-1,-1,1,"fCanDate=",0,"date of to-day put in 3rd label");
   G__memvar_setup((void*)((long)(&p->fPad)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TPad),-1,-1,1,"fPad=",0,"pad inside fCanvas");
   G__memvar_setup((void*)((long)(&p->fPadXlow)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fPadXlow=",0,"x low of fPad inside fCanvas");
   G__memvar_setup((void*)((long)(&p->fPadXup)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fPadXup=",0,"x up of fPad inside fCanvas");
   G__memvar_setup((void*)((long)(&p->fPadYlow)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fPadYlow=",0,"y low of fPad inside fCanvas");
   G__memvar_setup((void*)((long)(&p->fPadYup)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fPadYup=",0,"y low of fPad inside fCanvas");
   G__memvar_setup((void*)((long)(&p->fPadColor)-(long)(p)),115,0,0,-1,G__defined_typename("Color_t"),-1,1,"fPadColor=",0,"color of Pad");
   G__memvar_setup((void*)((long)(&p->fPadBsz)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"fPadBsz=",0,"border size of fPad");
   G__memvar_setup((void*)((long)(&p->fPadStyle)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"fPadStyle=",0,"style of fPad");
   G__memvar_setup((void*)((long)(&p->fPadLogX)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fPadLogX=",0,"log display in x");
   G__memvar_setup((void*)((long)(&p->fPadLogY)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fPadLogY=",0,"log display in x");
   G__memvar_setup((void*)((long)(&p->fFrameColor)-(long)(p)),115,0,0,-1,G__defined_typename("Color_t"),-1,1,"fFrameColor=",0,"color of frame of fPad");
   G__memvar_setup((void*)((long)(&p->fStyleStat)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fStyleStat=",0,"stat");
   G__memvar_setup((void*)((long)(&p->fStyleFont)-(long)(p)),115,0,0,-1,G__defined_typename("Style_t"),-1,1,"fStyleFont=",0,"font of stat");
   G__memvar_setup((void*)((long)(&p->fStyleColor)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fStyleColor=",0,"color of stat");
   G__memvar_setup((void*)((long)(&p->fStyleH)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fStyleH=",0,"height of font in stat");
   G__memvar_setup((void*)((long)(&p->fStyleW)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fStyleW=",0,"width of font in stat");
   G__memvar_setup((void*)((long)(&p->fStyleHistColor)-(long)(p)),115,0,0,-1,G__defined_typename("Color_t"),-1,1,"fStyleHistColor=",0,"fill color of histograms");
   G__memvar_setup((void*)((long)(&p->fStyleTXSize)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fStyleTXSize=",0,"size of title");
   G__memvar_setup((void*)((long)(&p->fStyleTYSize)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fStyleTYSize=",0,"size of title");
   G__memvar_setup((void*)((long)(&p->fStyleTitleH)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fStyleTitleH=",0,"height of title");
   G__memvar_setup((void*)((long)(&p->fStyleTitleW)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fStyleTitleW=",0,"width of title");
   G__memvar_setup((void*)((long)(&p->fStyleTitleX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fStyleTitleX=",0,"x of title");
   G__memvar_setup((void*)((long)(&p->fStyleTXOffset)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fStyleTXOffset=",0,"offset of x title");
   G__memvar_setup((void*)((long)(&p->fStyleTitleY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fStyleTitleY=",0,"H of title");
   G__memvar_setup((void*)((long)(&p->fStyleTYOffset)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fStyleTYOffset=",0,"offset of x title");
   G__memvar_setup((void*)((long)(&p->fStyleTBSize)-(long)(p)),115,0,0,-1,G__defined_typename("Width_t"),-1,1,"fStyleTBSize=",0,"title Border size");
   G__memvar_setup((void*)((long)(&p->fStyleTitleFont)-(long)(p)),115,0,0,-1,G__defined_typename("Style_t"),-1,1,"fStyleTitleFont=",0,"font of title");
   G__memvar_setup((void*)((long)(&p->fStyleTitleColor)-(long)(p)),115,0,0,-1,G__defined_typename("Color_t"),-1,1,"fStyleTitleColor=",0,"color of title");
   G__memvar_setup((void*)((long)(&p->fStyleTFColor)-(long)(p)),115,0,0,-1,G__defined_typename("Color_t"),-1,1,"fStyleTFColor=",0,"fill color for title");
   G__memvar_setup((void*)((long)(&p->fStyleTTextColor)-(long)(p)),115,0,0,-1,G__defined_typename("Color_t"),-1,1,"fStyleTTextColor=",0,"color text of title");
   G__memvar_setup((void*)((long)(&p->fStyleLabelSize)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fStyleLabelSize=",0,"size of label");
   G__memvar_setup((void*)((long)(&p->fStyleLabelAxis)-(long)(p)),67,0,0,-1,G__defined_typename("Option_t"),-1,1,"fStyleLabelAxis=",0,"axis type of label");
   G__memvar_setup((void*)((long)(&p->fTex1)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TLatex),-1,-1,1,"fTex1=",0,"user updatable label 1 on top    left  of main canvas");
   G__memvar_setup((void*)((long)(&p->fTextT1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TString),-1,-1,1,"fTextT1=",0,"text in fTex1");
   G__memvar_setup((void*)((long)(&p->fXTex1)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fXTex1=",0,"x position of label 1");
   G__memvar_setup((void*)((long)(&p->fYTex1)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fYTex1=",0,"y position of label 1");
   G__memvar_setup((void*)((long)(&p->fTex2)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TLatex),-1,-1,1,"fTex2=",0,"user updatable label 2 on bottom left  of main canvas");
   G__memvar_setup((void*)((long)(&p->fTextT2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TString),-1,-1,1,"fTextT2=",0,"text in fTex2");
   G__memvar_setup((void*)((long)(&p->fXTex2)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fXTex2=",0,"x position of label 2");
   G__memvar_setup((void*)((long)(&p->fYTex2)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fYTex2=",0,"y position of label 2");
   G__memvar_setup((void*)((long)(&p->fTex3)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TLatex),-1,-1,1,"fTex3=",0,"fixed          label 3 on bottom right of main canvas");
   G__memvar_setup((void*)((long)(&p->fTextT3)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TString),-1,-1,1,"fTextT3=",0,"text in fTex3");
   G__memvar_setup((void*)((long)(&p->fXTex3)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fXTex3=",0,"x position of label 3");
   G__memvar_setup((void*)((long)(&p->fYTex3)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fYTex3=",0,"y position of label 3");
   G__memvar_setup((void*)((long)(&p->fFontTex)-(long)(p)),115,0,0,-1,G__defined_typename("Font_t"),-1,1,"fFontTex=",0,"font used for label");
   G__memvar_setup((void*)((long)(&p->fSizeTex)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fSizeTex=",0,"size of label font");
   G__memvar_setup((void*)((long)(&p->fWidthTex)-(long)(p)),115,0,0,-1,G__defined_typename("Width_t"),-1,1,"fWidthTex=",0,"line width for label text");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TBandedLE */
static void G__setup_memvarTBandedLE(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SplineFitDictLN_TBandedLE));
   { TBandedLE *p; p=(TBandedLE*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fF=",0,"0  : everything ok. | -1 : the matrix was singular | -2 : the provided arguments of the constructor were bad");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fN=",0,"Number of equations");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fM=",0,"Band parameter. Band size is 2*fM + 1;");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fK=",0,"Number of right-hand sides (columns) in matrix fB");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fOwnA=",0,"! True if \"this\" is owner of fA: for instance when \"this\" read from file");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fOwnB=",0,"! True if \"this\" is owner of fB: for instance when \"this\" read from file or fB has not been provided by the user");
   G__memvar_setup((void*)((long)(&p->fA)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTlEdoublegR),G__defined_typename("TMatrixD"),-1,1,"fA=",0,"User provided matrix A. Remains untouched.");
   G__memvar_setup((void*)((long)(&p->fB)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTlEdoublegR),G__defined_typename("TMatrixD"),-1,1,"fB=",0,"User provided matrix B. Remains untouched");
   G__memvar_setup((void*)((long)(&p->fX)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTlEdoublegR),G__defined_typename("TMatrixD"),-1,1,"fX=",0,"Solution of the problem");
   G__memvar_setup((void*)((long)(&p->fV)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,1,"fV=",0,"Solution of the problem in case fK==1");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TZigZag */
static void G__setup_memvarTZigZag(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SplineFitDictLN_TZigZag));
   { TZigZag *p; p=(TZigZag*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fDim=",0,"dimension: 1,2 or 3!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNx=",0,"Nb. of points along x");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNy=",0,"Nb. of points along y");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNz=",0,"Nb. of points along z");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fXmin=",0,"low bound in x");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fYmin=",0,"low bound in y");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZmin=",0,"low bound in z");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fXmax=",0,"up  bound in x");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fYmax=",0,"up  bound in y");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZmax=",0,"up  bound in z");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSplineFit */
static void G__setup_memvarTSplineFit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit));
   { TSplineFit *p; p=(TSplineFit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_KindOfFit),-1,-1,2,"fType=",0,"Type of fit or interpolation");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fCat=",0,"Category to which this spline fit belongs (arbitrary)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNbInFamily=",0,"-1 if fit not in a family,  0<=fFamylyNb<n if n elements in the family");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fM=",0,"Number of measurements (xi,yi,si)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMi=",0,"Number of measurements (xi,yi,si) per spline (or per sub-interval)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMl=",0,"Number of measurements (xi,yi,si) for the last spline");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fN=",0,"Number of splines (or sub-intervals)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNs2=",0,"Biggest power of 2 less than fN;");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSlope=",0,"Slope of linear transformation to go to normalized x [-1,1]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fCst=",0,"Constant term of linear transformation to go to normalized x [-1,1]");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fBoundedLow=",0,"True if y has a lower bound");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLowBound=",0,"Lower bound for y");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fBoundedUp=",0,"True if y has an upper bound");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fUpBound=",0,"High bound for y");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTlEdoublegR),G__defined_typename("TMatrixD"),-1,2,"fA=",0,"! Band matrix of the problem, in compact form. See TBandedLE");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTlEdoublegR),G__defined_typename("TMatrixD"),-1,2,"fB=",0,"! Matrix of the right-hand side of the problem");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TArrayD),-1,-1,2,"fX=",0,"solution of the problem");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TArrayD),-1,-1,2,"fKhi=",0,"fKhi[k-1] = xmin for sub-interval k. fKhi[k] =  xmax for sub-interval k.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TArrayD),-1,-1,2,"fMt=",0,"coordinate t of measurements. In case of 1D fit t==x");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TArrayD),-1,-1,2,"fMv=",0,"measured values at x");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TArrayD),-1,-1,2,"fMs=",0,"errors on y measurements");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fUseForRandom=",0,"If true, fit used to generate random numbers");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fParameter=",0,"Variable or parameter associated with this fit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TString),-1,-1,2,"fParameterDef=",0,"Definition of the parameter [the same for all members of a family]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TZigZag),-1,-1,2,"fZigZag=",0,"For use with 2D or 3D fits");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TString),-1,-1,2,"fDate=",0,"Date of creation of this fit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TString),-1,-1,2,"fSource=",0,"Source of the measurements");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TString),-1,-1,2,"fMacro=",0,"Name of CINT macro having produced this fit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TString),-1,-1,2,"fXLabel=",0,"Label of the x axis");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TString),-1,-1,2,"fYLabel=",0,"Label of the x axis");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TString),-1,-1,2,"fZLabel=",0,"Label of the x axis");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TString),-1,-1,2,"fVLabel=",0,"Label of the x axis");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TSpline3),-1,-1,2,"fInterpolation=",0,"! TSpline3 used in case the user asks for an interpolation, not a fit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TH1D),-1,-1,2,"fHGenRandom=",0,"! Histogram used to get random numbers according to the fitted distribution");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TH1D),-1,-1,2,"fHShowRandom=",0,"! Histogram used to display the random numbers generated");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fMemoryReduced=",0,"! Everything deleted, except the fit. In case you lack of memory");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TString),-1,-1,2,"fProvidedName=",0,"! Name of fProvidedH1D, kept in case user delete histo");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TF1),-1,-1,2,"fSplineFitFunc=",0,"! function given to provided histo, to show fit on histo");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TGraphErrors),-1,-1,2,"fPointsGraph=",0,"! Graph for drawing measurements");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TGraph),-1,-1,2,"fSplineGraph=",0,"! Graph for drawing fit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TMultiGraph),-1,-1,2,"fPS=",0,"! Multi graph containing both");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"f2Drestored=",0,"! True if fProvidedH2D has been restored");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"f3Drestored=",0,"! True if fProvidedH3D has been restored");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TH1D),-1,-1,2,"fProvidedH1D=",0,"! Histo provided in 4th or 5th constructor. Not owned by TSplineFit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TH2D),-1,-1,2,"fProvidedH2D=",0,"! Histo provided in 7th constructor. Not owned by TSplineFit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TH2D),-1,-1,2,"fH2Dfit=",0,"! Histo to show the 2D fit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TH3D),-1,-1,2,"fProvidedH3D=",0,"! Histo provided in 8th constructor. Not owned by TSplineFit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TH3D),-1,-1,2,"fH3Dfit=",0,"! Histo to show the 3D fit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"fgNextDraw=",0,"Next fit to be drawn");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"fgM=",0,"order M of band matrix fA, always equal to 6");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"fgU=",0,"number of unknowns for one spline, with Lagrange parameters, always equal to 7");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TArrayI),-1,-2,2,"fgCat=",0,"Array of categories");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TFile),-1,-2,2,"fgFitFile=",0,"\"Database\" file containing fits");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TTree),-1,-2,2,"fgFitTree=",0,"Tree of fits");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TBranch),-1,-2,2,"fgFitBranch=",0,"Branch of fits");
   G__memvar_setup((void*)(&TSplineFit::fgFits),85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TObjArray),-1,-2,1,"fgFits=",0,"Collection of all TSplineFits");
   G__memvar_setup((void*)(&TSplineFit::fgProgName),85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TString),-1,-2,1,"fgProgName=",0,"Name of this software");
   G__memvar_setup((void*)(&TSplineFit::fgWebAddress),85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TString),-1,-2,1,"fgWebAddress=",0,"Web address for SplineFit");
   G__memvar_setup((void*)(&TSplineFit::fgFileName),85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TString),-1,-2,1,"fgFileName=",0,"Name or TreeName of \"database\" file containing fits");
   G__memvar_setup((void*)(&TSplineFit::fgNChanRand),105,0,0,-1,G__defined_typename("Int_t"),-2,1,"fgNChanRand=",0,"number of channels for the 2 histograms fHGenRandom and fHShowRandom");
   G__memvar_setup((void*)(&TSplineFit::fgCounter),105,0,0,-1,G__defined_typename("Int_t"),-2,1,"fgCounter=",0,"new versus delete");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SplineFitDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarSplineFitDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTPoly3(void) {
   /* TPoly3 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SplineFitDictLN_TPoly3));
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Solve2",571,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "d - 'Double_t' 0 '0.0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Solve3",572,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "d - 'Double_t' 0 '0.0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TPoly3",555,G__SplineFitDict_548_0_4, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TPoly3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TPoly3",555,G__SplineFitDict_548_0_5, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TPoly3), -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TPoly3",555,G__SplineFitDict_548_0_6, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TPoly3), -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Degree",588,G__SplineFitDict_548_0_7, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Extrema",726,G__SplineFitDict_548_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Integral",822,G__SplineFitDict_548_0_9, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__SplineFitDict_548_0_10, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__SplineFitDict_548_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Solution",861,G__SplineFitDict_548_0_12, 115, -1, G__defined_typename("Short_t"), 0, 5, 1, 1, 0, 
"d - 'Double_t' 1 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - - d - 'Double_t' 1 - - "
"g - 'Bool_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Solve",521,G__SplineFitDict_548_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '0.0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Solve",521,G__SplineFitDict_548_0_14, 115, -1, G__defined_typename("Short_t"), 0, 5, 1, 1, 0, 
"d - 'Double_t' 1 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - - g - 'Bool_t' 1 - - "
"d - 'Double_t' 0 '0.0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SolveLeft",916,G__SplineFitDict_548_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"d - 'Double_t' 1 - - d - 'Double_t' 0 '0.0' - "
"g - 'Bool_t' 0 'kFALSE' - d - 'Double_t' 0 '-1.0' - "
"d - 'Double_t' 0 '1.0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SolveRight",1031,G__SplineFitDict_548_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"d - 'Double_t' 1 - - d - 'Double_t' 0 '0.0' - "
"g - 'Bool_t' 0 'kFALSE' - d - 'Double_t' 0 '-1.0' - "
"d - 'Double_t' 0 '1.0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Y",89,G__SplineFitDict_548_0_17, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SplineFitDict_548_0_18, 85, G__get_linked_tagnum(&G__SplineFitDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TPoly3::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SplineFitDict_548_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPoly3::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SplineFitDict_548_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TPoly3::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SplineFitDict_548_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TPoly3::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SplineFitDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SplineFitDict_548_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SplineFitDict_548_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPoly3::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SplineFitDict_548_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPoly3::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SplineFitDict_548_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TPoly3::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SplineFitDict_548_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TPoly3::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TPoly3", 555, G__SplineFitDict_548_0_30, (int) ('i'), G__get_linked_tagnum(&G__SplineFitDictLN_TPoly3), -1, 0, 1, 1, 1, 0, "u 'TPoly3' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TPoly3", 681, G__SplineFitDict_548_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SplineFitDict_548_0_32, (int) ('u'), G__get_linked_tagnum(&G__SplineFitDictLN_TPoly3), -1, 1, 1, 1, 1, 0, "u 'TPoly3' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTOnePadDisplay(void) {
   /* TOnePadDisplay */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SplineFitDictLN_TOnePadDisplay));
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TOnePadDisplay",1377,G__SplineFitDict_610_0_2, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TOnePadDisplay), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TOnePadDisplay",1377,G__SplineFitDict_610_0_3, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TOnePadDisplay), -1, 0, 3, 1, 1, 0, 
"C - - 10 - - C - - 10 - - "
"g - 'Bool_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TOnePadDisplay",1377,G__SplineFitDict_610_0_4, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TOnePadDisplay), -1, 0, 4, 1, 1, 0, 
"C - - 10 - - C - - 10 - - "
"C - - 10 - - g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TOnePadDisplay",1377,G__SplineFitDict_610_0_5, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TOnePadDisplay), -1, 0, 5, 1, 1, 0, 
"C - - 10 - - C - - 10 - - "
"C - - 10 - - C - - 10 - - "
"g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TOnePadDisplay",1377,G__SplineFitDict_610_0_6, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TOnePadDisplay), -1, 0, 6, 1, 1, 0, 
"C - - 10 - - C - - 10 - - "
"C - - 10 - - C - - 10 - - "
"C - - 10 - - g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BookCanvas",999,G__SplineFitDict_610_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BookLabels",990,G__SplineFitDict_610_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawLabels",993,G__SplineFitDict_610_0_9, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NewLabel1",827,G__SplineFitDict_610_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewLabel2",828,G__SplineFitDict_610_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewLabel3",829,G__SplineFitDict_610_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewLabel12",877,G__SplineFitDict_610_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - C - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewLabels",893,G__SplineFitDict_610_0_14, 121, -1, -1, 0, 3, 1, 1, 0, 
"C - - 10 - - C - - 10 - - "
"C - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSmall",805,G__SplineFitDict_610_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SplineFitDict_610_0_16, 85, G__get_linked_tagnum(&G__SplineFitDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TOnePadDisplay::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SplineFitDict_610_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TOnePadDisplay::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SplineFitDict_610_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TOnePadDisplay::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SplineFitDict_610_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TOnePadDisplay::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SplineFitDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SplineFitDict_610_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SplineFitDict_610_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TOnePadDisplay::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SplineFitDict_610_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TOnePadDisplay::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SplineFitDict_610_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TOnePadDisplay::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SplineFitDict_610_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TOnePadDisplay::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TOnePadDisplay", 1377, G__SplineFitDict_610_0_28, (int) ('i'), G__get_linked_tagnum(&G__SplineFitDictLN_TOnePadDisplay), -1, 0, 1, 1, 1, 0, "u 'TOnePadDisplay' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TOnePadDisplay", 1503, G__SplineFitDict_610_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SplineFitDict_610_0_30, (int) ('u'), G__get_linked_tagnum(&G__SplineFitDictLN_TOnePadDisplay), -1, 1, 1, 1, 1, 0, "u 'TOnePadDisplay' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTBandedLE(void) {
   /* TBandedLE */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SplineFitDictLN_TBandedLE));
   G__memfunc_setup("Compactify",1039,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TBandedLE",803,G__SplineFitDict_675_0_3, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TBandedLE), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TBandedLE",803,G__SplineFitDict_675_0_4, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TBandedLE), -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - u 'TMatrixT<double>' 'TMatrixD' 1 - - "
"u 'TMatrixT<double>' 'TMatrixD' 1 - - g - 'Bool_t' 0 'kTRUE' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TBandedLE",803,G__SplineFitDict_675_0_5, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TBandedLE), -1, 0, 4, 1, 1, 0, 
"u 'TMatrixT<double>' 'TMatrixD' 1 - - u 'TMatrixT<double>' 'TMatrixD' 1 - - "
"i - 'Int_t' 0 - - g - 'Bool_t' 0 'kTRUE' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TBandedLE",803,G__SplineFitDict_675_0_6, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TBandedLE), -1, 0, 3, 1, 1, 0, 
"u 'TMatrixT<double>' 'TMatrixD' 1 - - i - 'Int_t' 0 - - "
"g - 'Bool_t' 0 'kTRUE' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetfA",455,G__SplineFitDict_675_0_7, 85, G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTlEdoublegR), G__defined_typename("TMatrixD"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetfB",456,G__SplineFitDict_675_0_8, 85, G__get_linked_tagnum(&G__SplineFitDictLN_TMatrixTlEdoublegR), G__defined_typename("TMatrixD"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetfF",460,G__SplineFitDict_675_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetfK",465,G__SplineFitDict_675_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetfM",467,G__SplineFitDict_675_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetfN",468,G__SplineFitDict_675_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Solve",521,G__SplineFitDict_675_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Verify",629,G__SplineFitDict_675_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SplineFitDict_675_0_15, 85, G__get_linked_tagnum(&G__SplineFitDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TBandedLE::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SplineFitDict_675_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TBandedLE::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SplineFitDict_675_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TBandedLE::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SplineFitDict_675_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TBandedLE::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SplineFitDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SplineFitDict_675_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SplineFitDict_675_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TBandedLE::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SplineFitDict_675_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TBandedLE::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SplineFitDict_675_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TBandedLE::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SplineFitDict_675_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TBandedLE::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TBandedLE", 803, G__SplineFitDict_675_0_27, (int) ('i'), G__get_linked_tagnum(&G__SplineFitDictLN_TBandedLE), -1, 0, 1, 1, 1, 0, "u 'TBandedLE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TBandedLE", 929, G__SplineFitDict_675_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SplineFitDict_675_0_29, (int) ('u'), G__get_linked_tagnum(&G__SplineFitDictLN_TBandedLE), -1, 1, 1, 1, 1, 0, "u 'TBandedLE' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTZigZag(void) {
   /* TZigZag */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SplineFitDictLN_TZigZag));
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TZigZag",672,G__SplineFitDict_676_0_2, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TZigZag), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TZigZag",672,G__SplineFitDict_676_0_3, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TZigZag), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TZigZag",672,G__SplineFitDict_676_0_4, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TZigZag), -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - i - 'Int_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TZigZag",672,G__SplineFitDict_676_0_5, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TZigZag), -1, 0, 9, 1, 1, 0, 
"i - 'Int_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - i - 'Int_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"i - 'Int_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TZigZag",672,G__SplineFitDict_676_0_6, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TZigZag), -1, 0, 1, 1, 1, 0, "u 'TZigZag' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNx",486,G__SplineFitDict_676_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNy",487,G__SplineFitDict_676_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNz",488,G__SplineFitDict_676_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXmin",700,G__SplineFitDict_676_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXmax",702,G__SplineFitDict_676_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYmin",701,G__SplineFitDict_676_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYmax",703,G__SplineFitDict_676_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZmin",702,G__SplineFitDict_676_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZmax",704,G__SplineFitDict_676_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsInside",792,G__SplineFitDict_676_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 10, 1, 1, 8, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsInside",792,G__SplineFitDict_676_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 15, 1, 1, 8, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NearestPoints",1359,G__SplineFitDict_676_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - - u 'TArrayI' - 1 - - "
"u 'TArrayD' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NearestPoints",1359,G__SplineFitDict_676_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 8, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - u 'TArrayI' - 1 - - "
"u 'TArrayD' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NToZZ",453,G__SplineFitDict_676_0_20, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NToZZ",453,G__SplineFitDict_676_0_21, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NToZZ",453,G__SplineFitDict_676_0_22, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Order",508,G__SplineFitDict_676_0_23, 121, -1, -1, 0, 5, 1, 1, 8, 
"i - 'Int_t' 0 - - u 'TArrayI' - 1 - - "
"u 'TArrayD' - 1 - - u 'TArrayD' - 1 - - "
"u 'TArrayD' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PointsNear",1027,G__SplineFitDict_676_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 8, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 1 - - u 'TArrayD' - 1 - - "
"u 'TArrayD' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("T",84,G__SplineFitDict_676_0_25, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TMax",378,G__SplineFitDict_676_0_26, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SplineFitDict_676_0_27, 85, G__get_linked_tagnum(&G__SplineFitDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TZigZag::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SplineFitDict_676_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TZigZag::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SplineFitDict_676_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TZigZag::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SplineFitDict_676_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TZigZag::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SplineFitDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SplineFitDict_676_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SplineFitDict_676_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TZigZag::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SplineFitDict_676_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TZigZag::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SplineFitDict_676_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TZigZag::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SplineFitDict_676_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TZigZag::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TZigZag", 798, G__SplineFitDict_676_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SplineFitDict_676_0_40, (int) ('u'), G__get_linked_tagnum(&G__SplineFitDictLN_TZigZag), -1, 1, 1, 1, 1, 0, "u 'TZigZag' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSplineFit(void) {
   /* TSplineFit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit));
   G__memfunc_setup("AddFit",556,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 3, 2, 0, "U 'TSplineFit' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddThisFit",964,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AdjustErrors",1256,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AdjustfgCat",1104,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 3, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Alpha",486,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 2, 8, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AlreadySeen",1101,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 8, 
"u 'TString' - 1 - - u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyLowBound",1328,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 8, "u 'TArrayD' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Beta",380,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 2, 8, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearGraphs",1100,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "g - 'Bool_t' 0 'kTRUE' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CutLinkWithHisto",1629,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExtractPrefixN",1431,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 8, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExtractPrefixT",1437,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 8, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindDate",767,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataFromHist",1478,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - U 'TH1D' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitCatAndBounds",1578,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 2, 0, 
"i - 'Int_t' 0 - - g - 'Bool_t' 0 - - "
"d - 'Double_t' 0 - - g - 'Bool_t' 0 - - "
"d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitCheckBounds",1501,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitDimensions",1453,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitIntervals",1356,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Interpolation",1384,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Interval",837,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 8, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MinMax",586,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 7, 1, 2, 8, 
"i - 'Int_t' 0 - - g - 'Bool_t' 1 - - "
"d - 'Double_t' 1 - - d - 'Double_t' 1 - - "
"g - 'Bool_t' 1 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Regenerate",1026,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RestoreHisto",1259,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Solve",521,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VerifyNT",791,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSplineFit",994,G__SplineFitDict_732_0_28, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSplineFit",994,G__SplineFitDict_732_0_29, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit), -1, 0, 15, 1, 1, 0, 
"C - 'Text_t' 0 - - C - 'Text_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - D - 'Double_t' 0 - - "
"D - 'Double_t' 0 - - D - 'Double_t' 0 '0' - "
"g - 'Bool_t' 0 'kFALSE' - d - 'Double_t' 0 '0.0' - "
"g - 'Bool_t' 0 'kFALSE' - d - 'Double_t' 0 '1.0' - "
"d - 'Double_t' 0 '1.0' - d - 'Double_t' 0 '-1.0' - "
"g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSplineFit",994,G__SplineFitDict_732_0_30, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit), -1, 0, 8, 1, 1, 0, 
"C - 'Text_t' 0 - - C - 'Text_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"D - 'Double_t' 0 - - D - 'Double_t' 0 - - "
"d - 'Double_t' 0 '1.0' - d - 'Double_t' 0 '-1.0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSplineFit",994,G__SplineFitDict_732_0_31, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit), -1, 0, 12, 1, 1, 0, 
"C - 'Text_t' 0 - - C - 'Text_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"U 'TGraphErrors' - 0 - - g - 'Bool_t' 0 'kFALSE' - "
"d - 'Double_t' 0 '0.0' - g - 'Bool_t' 0 'kFALSE' - "
"d - 'Double_t' 0 '1.0' - d - 'Double_t' 0 '1.0' - "
"d - 'Double_t' 0 '-1.0' - g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSplineFit",994,G__SplineFitDict_732_0_32, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit), -1, 0, 10, 1, 1, 0, 
"C - 'Text_t' 0 - - C - 'Text_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"U 'TH1D' - 0 - - g - 'Bool_t' 0 'kFALSE' - "
"d - 'Double_t' 0 '0.0' - g - 'Bool_t' 0 'kFALSE' - "
"d - 'Double_t' 0 '1.0' - g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSplineFit",994,G__SplineFitDict_732_0_33, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit), -1, 0, 8, 1, 1, 0, 
"U 'TH1D' - 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - g - 'Bool_t' 0 'kFALSE' - "
"d - 'Double_t' 0 '0.0' - g - 'Bool_t' 0 'kFALSE' - "
"d - 'Double_t' 0 '1.0' - g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSplineFit",994,G__SplineFitDict_732_0_34, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit), -1, 0, 10, 1, 1, 0, 
"C - 'Text_t' 0 - - C - 'Text_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"U 'TH2D' - 0 - - g - 'Bool_t' 0 'kFALSE' - "
"d - 'Double_t' 0 '0.0' - g - 'Bool_t' 0 'kFALSE' - "
"d - 'Double_t' 0 '1.0' - g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSplineFit",994,G__SplineFitDict_732_0_35, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit), -1, 0, 10, 1, 1, 0, 
"C - 'Text_t' 0 - - C - 'Text_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"U 'TH3D' - 0 - - g - 'Bool_t' 0 'kFALSE' - "
"d - 'Double_t' 0 '0.0' - g - 'Bool_t' 0 'kFALSE' - "
"d - 'Double_t' 0 '1.0' - g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSplineFit",994,G__SplineFitDict_732_0_36, 105, G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit), -1, 0, 1, 1, 1, 0, "u 'TSplineFit' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddNumbering",1200,G__SplineFitDict_732_0_37, 121, -1, -1, 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - - u 'TString' - 1 - -", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, TString&))(&TSplineFit::AddNumbering) ), 0);
   G__memfunc_setup("BelongsToFamily",1519,G__SplineFitDict_732_0_38, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - - d - 'Double_t' 0 - - "
"C - 'Text_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckHistErrors",1523,G__SplineFitDict_732_0_39, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"U 'TH1' - 0 - - g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TH1*, Bool_t))(&TSplineFit::CheckHistErrors) ), 0);
   G__memfunc_setup("Chi2",326,G__SplineFitDict_732_0_40, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawData",776,G__SplineFitDict_732_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"LEGO2\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawFit",689,G__SplineFitDict_732_0_43, 121, -1, -1, 0, 4, 1, 1, 0, 
"C - 'Option_t' 10 '\"LEGO2\"' option i - 'Int_t' 0 '1' - "
"i - 'Int_t' 0 '1' - i - 'Int_t' 0 '1' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawFitsInCollection",2023,G__SplineFitDict_732_0_44, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSplineFit::DrawFitsInCollection) ), 0);
   G__memfunc_setup("DrawFitsInFile",1371,G__SplineFitDict_732_0_45, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSplineFit::DrawFitsInFile) ), 0);
   G__memfunc_setup("DrawHere",786,G__SplineFitDict_732_0_46, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 '1.0' - d - 'Double_t' 0 '-1.0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawHisto",917,G__SplineFitDict_732_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"LEGO2\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawNextInCollection",2032,G__SplineFitDict_732_0_48, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSplineFit::DrawNextInCollection) ), 0);
   G__memfunc_setup("ErrorsFromFit",1332,G__SplineFitDict_732_0_49, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillGraphs",1004,G__SplineFitDict_732_0_50, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 '200' - s - 'Color_t' 0 '4' - "
"s - 'Style_t' 0 '21' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillH2D3D",700,G__SplineFitDict_732_0_51, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 '1' - i - 'Int_t' 0 '1' - "
"i - 'Int_t' 0 '1' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindFit",676,G__SplineFitDict_732_0_52, 85, G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit), -1, 0, 3, 3, 1, 0, 
"C - 'Text_t' 10 - - i - 'Int_t' 0 '-1' - "
"g - 'Bool_t' 0 'kTRUE' -", (char*)NULL, (void*) G__func2void( (TSplineFit* (*)(const Text_t*, Int_t, Bool_t))(&TSplineFit::FindFit) ), 0);
   G__memfunc_setup("FindFirstInFamily",1698,G__SplineFitDict_732_0_53, 85, G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindFirstInFamily",1698,G__SplineFitDict_732_0_54, 85, G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit), -1, 0, 2, 3, 1, 0, 
"C - 'Text_t' 10 - - i - 'Int_t' 1 - -", (char*)NULL, (void*) G__func2void( (TSplineFit* (*)(const Text_t*, Int_t&))(&TSplineFit::FindFirstInFamily) ), 0);
   G__memfunc_setup("FindFitInFamily",1469,G__SplineFitDict_732_0_55, 85, G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit), -1, 0, 3, 3, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) G__func2void( (TSplineFit* (*)(Int_t, Int_t, Int_t))(&TSplineFit::FindFitInFamily) ), 0);
   G__memfunc_setup("GetCategory",1118,G__SplineFitDict_732_0_56, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCst",586,G__SplineFitDict_732_0_57, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataFromHist",1478,G__SplineFitDict_732_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDate",670,G__SplineFitDict_732_0_59, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFamilyName",1283,G__SplineFitDict_732_0_60, 67, -1, G__defined_typename("Text_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistGen",978,G__SplineFitDict_732_0_61, 85, G__get_linked_tagnum(&G__SplineFitDictLN_TH1D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistShow",1113,G__SplineFitDict_732_0_62, 85, G__get_linked_tagnum(&G__SplineFitDictLN_TH1D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetKindOfFit",1150,G__SplineFitDict_732_0_63, 105, G__get_linked_tagnum(&G__SplineFitDictLN_KindOfFit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLowBound",1098,G__SplineFitDict_732_0_64, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMacro",786,G__SplineFitDict_732_0_65, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeasErr",975,G__SplineFitDict_732_0_66, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeasT",762,G__SplineFitDict_732_0_67, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeasV",764,G__SplineFitDict_732_0_68, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNbOfMeas",1035,G__SplineFitDict_732_0_69, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNbOfMeasLast",1439,G__SplineFitDict_732_0_70, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNbOfMeasSpline",1654,G__SplineFitDict_732_0_71, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNbOfSplines",1379,G__SplineFitDict_732_0_72, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParameter",1217,G__SplineFitDict_732_0_73, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParameterDef",1488,G__SplineFitDict_732_0_74, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosInFamily",1387,G__SplineFitDict_732_0_75, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProvidedName",1502,G__SplineFitDict_732_0_76, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRandom",897,G__SplineFitDict_732_0_77, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRandom",897,G__SplineFitDict_732_0_78, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSlope",803,G__SplineFitDict_732_0_79, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSource",913,G__SplineFitDict_732_0_80, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSpline",907,G__SplineFitDict_732_0_81, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 8, 
"i - 'Int_t' 0 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSpline",907,G__SplineFitDict_732_0_82, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 8, 
"d - 'Double_t' 0 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSplineNN",1063,G__SplineFitDict_732_0_83, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 8, 
"i - 'Int_t' 0 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSplineNN",1063,G__SplineFitDict_732_0_84, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 8, 
"d - 'Double_t' 0 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetUpBound",989,G__SplineFitDict_732_0_85, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVLabel",854,G__SplineFitDict_732_0_86, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXLabel",856,G__SplineFitDict_732_0_87, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXLowInterval",1519,G__SplineFitDict_732_0_88, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXmax",702,G__SplineFitDict_732_0_89, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXmin",700,G__SplineFitDict_732_0_90, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXUpInterval",1410,G__SplineFitDict_732_0_91, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYLabel",857,G__SplineFitDict_732_0_92, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZLabel",858,G__SplineFitDict_732_0_93, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitStatic",1020,G__SplineFitDict_732_0_94, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSplineFit::InitStatic) ), 0);
   G__memfunc_setup("Integral",822,G__SplineFitDict_732_0_95, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEqual",692,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsInCollection",1407,G__SplineFitDict_732_0_97, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsInCollection",1407,G__SplineFitDict_732_0_98, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "U 'TSplineFit' - 0 - -", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TSplineFit*))(&TSplineFit::IsInCollection) ), 0);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LoadFamily",994,G__SplineFitDict_732_0_100, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadFamily",994,G__SplineFitDict_732_0_101, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "C - 'Text_t' 10 - -", (char*)NULL, (void*) G__func2void( (Int_t (*)(const Text_t*))(&TSplineFit::LoadFamily) ), 0);
   G__memfunc_setup("MinMax",586,G__SplineFitDict_732_0_102, 121, -1, -1, 0, 6, 1, 1, 8, 
"g - 'Bool_t' 1 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - - g - 'Bool_t' 1 - - "
"d - 'Double_t' 1 - - d - 'Double_t' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MultinomialAsWeight",1959,G__SplineFitDict_732_0_103, 121, -1, -1, 0, 1, 3, 1, 0, "U 'TH1' - 0 - -", (char*)NULL, (void*) G__func2void( (void (*)(TH1*))(&TSplineFit::MultinomialAsWeight) ), 0);
   G__memfunc_setup("NameFile",769,G__SplineFitDict_732_0_104, 121, -1, -1, 0, 1, 3, 1, 0, "C - 'Text_t' 0 '\"SplineFitDB.rdb\"' -", (char*)NULL, (void*) G__func2void( (void (*)(Text_t*))(&TSplineFit::NameFile) ), 0);
   G__memfunc_setup("NameProg",793,G__SplineFitDict_732_0_105, 121, -1, -1, 0, 1, 3, 1, 0, "C - 'Text_t' 0 '\"SplineFit\"' -", (char*)NULL, (void*) G__func2void( (void (*)(Text_t*))(&TSplineFit::NameProg) ), 0);
   G__memfunc_setup("NameWeb",671,G__SplineFitDict_732_0_106, 121, -1, -1, 0, 1, 3, 1, 0, "C - 'Text_t' 0 '\"SplineFit gentit.home.cern.ch/gentit/splinefit/index.html\"' -", (char*)NULL, (void*) G__func2void( (void (*)(Text_t*))(&TSplineFit::NameWeb) ), 0);
   G__memfunc_setup("OrderFile",892,G__SplineFitDict_732_0_107, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' -", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Bool_t))(&TSplineFit::OrderFile) ), 0);
   G__memfunc_setup("Pedestal",818,G__SplineFitDict_732_0_108, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__SplineFitDict_732_0_109, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Purge",515,G__SplineFitDict_732_0_110, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSplineFit::Purge) ), 0);
   G__memfunc_setup("PurgeStatic",1131,G__SplineFitDict_732_0_111, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSplineFit::PurgeStatic) ), 0);
   G__memfunc_setup("RedoFit",685,G__SplineFitDict_732_0_112, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReduceMemory",1233,G__SplineFitDict_732_0_113, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RemoveDisplay",1348,G__SplineFitDict_732_0_114, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSplineFit::RemoveDisplay) ), 0);
   G__memfunc_setup("RemoveFitFromFile",1701,G__SplineFitDict_732_0_115, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"C - 'Text_t' 0 - - g - 'Bool_t' 0 'kTRUE' -", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Text_t*, Bool_t))(&TSplineFit::RemoveFitFromFile) ), 0);
   G__memfunc_setup("SetDefaultLabels",1604,G__SplineFitDict_732_0_116, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMacro",798,G__SplineFitDict_732_0_117, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Text_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMeasErr",987,G__SplineFitDict_732_0_118, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i d - 'Double_t' 0 - E", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMeasX",778,G__SplineFitDict_732_0_119, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMeasY",779,G__SplineFitDict_732_0_120, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParameter",1229,G__SplineFitDict_732_0_121, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - - C - 'Text_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSource",925,G__SplineFitDict_732_0_122, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Text_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVLabel",866,G__SplineFitDict_732_0_123, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Text_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXLabel",868,G__SplineFitDict_732_0_124, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Text_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetYLabel",869,G__SplineFitDict_732_0_125, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Text_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZLabel",870,G__SplineFitDict_732_0_126, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Text_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShowFitsInFile",1390,G__SplineFitDict_732_0_127, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSplineFit::ShowFitsInFile) ), 0);
   G__memfunc_setup("ShowRandom",1026,G__SplineFitDict_732_0_128, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SolveLeft",916,G__SplineFitDict_732_0_129, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"d - 'Double_t' 1 - - d - 'Double_t' 0 '0.0' - "
"g - 'Bool_t' 0 'kFALSE' - d - 'Double_t' 0 '-1.0' - "
"d - 'Double_t' 0 '1.0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateFile",995,G__SplineFitDict_732_0_130, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UseForRandom",1205,G__SplineFitDict_732_0_131, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("V",86,G__SplineFitDict_732_0_132, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("V",86,G__SplineFitDict_732_0_133, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("V",86,G__SplineFitDict_732_0_134, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("V",86,G__SplineFitDict_732_0_135, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VerifyNotInFile",1501,G__SplineFitDict_732_0_136, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("XNorm",500,G__SplineFitDict_732_0_137, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("XpowerM",722,G__SplineFitDict_732_0_138, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"d - 'Double_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t, Int_t))(&TSplineFit::XpowerM) ), 0);
   G__memfunc_setup("XUser",503,G__SplineFitDict_732_0_139, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SplineFitDict_732_0_140, 85, G__get_linked_tagnum(&G__SplineFitDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSplineFit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SplineFitDict_732_0_141, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSplineFit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SplineFitDict_732_0_142, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSplineFit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SplineFitDict_732_0_143, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSplineFit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SplineFitDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SplineFitDict_732_0_147, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SplineFitDict_732_0_148, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSplineFit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SplineFitDict_732_0_149, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSplineFit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SplineFitDict_732_0_150, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSplineFit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SplineFitDict_732_0_151, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSplineFit::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TSplineFit", 1120, G__SplineFitDict_732_0_152, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SplineFitDict_732_0_153, (int) ('u'), G__get_linked_tagnum(&G__SplineFitDictLN_TSplineFit), -1, 1, 1, 1, 1, 0, "u 'TSplineFit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncSplineFitDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {
}

static void G__cpp_setup_global6() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalSplineFitDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
  G__cpp_setup_global6();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcSplineFitDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__SplineFitDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__SplineFitDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TCanvas = { "TCanvas" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TBranch = { "TBranch" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TPoly3 = { "TPoly3" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_pairlEunsignedsPintcOintgR = { "pair<unsigned int,int>" , 115 , -1 };
G__linked_taginfo G__SplineFitDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR = { "vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TPad = { "TPad" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TLatex = { "TLatex" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TOnePadDisplay = { "TOnePadDisplay" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TMatrixTSymlEdoublegR = { "TMatrixTSym<double>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TMatrixTSparselEdoublegR = { "TMatrixTSparse<double>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TBandedLE = { "TBandedLE" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TZigZag = { "TZigZag" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TGraphErrors = { "TGraphErrors" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TMultiGraph = { "TMultiGraph" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TH2D = { "TH2D" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TH3D = { "TH3D" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_TSpline3 = { "TSpline3" , 99 , -1 };
G__linked_taginfo G__SplineFitDictLN_KindOfFit = { "KindOfFit" , 101 , -1 };
G__linked_taginfo G__SplineFitDictLN_TSplineFit = { "TSplineFit" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableSplineFitDict() {
  G__SplineFitDictLN_TClass.tagnum = -1 ;
  G__SplineFitDictLN_TBuffer.tagnum = -1 ;
  G__SplineFitDictLN_TMemberInspector.tagnum = -1 ;
  G__SplineFitDictLN_TObject.tagnum = -1 ;
  G__SplineFitDictLN_TNamed.tagnum = -1 ;
  G__SplineFitDictLN_TString.tagnum = -1 ;
  G__SplineFitDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__SplineFitDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SplineFitDictLN_TObjArray.tagnum = -1 ;
  G__SplineFitDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__SplineFitDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SplineFitDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__SplineFitDictLN_TFile.tagnum = -1 ;
  G__SplineFitDictLN_TCanvas.tagnum = -1 ;
  G__SplineFitDictLN_TTree.tagnum = -1 ;
  G__SplineFitDictLN_TBranch.tagnum = -1 ;
  G__SplineFitDictLN_TArrayD.tagnum = -1 ;
  G__SplineFitDictLN_TArrayI.tagnum = -1 ;
  G__SplineFitDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__SplineFitDictLN_TH1.tagnum = -1 ;
  G__SplineFitDictLN_TPoly3.tagnum = -1 ;
  G__SplineFitDictLN_pairlEunsignedsPintcOintgR.tagnum = -1 ;
  G__SplineFitDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__SplineFitDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SplineFitDictLN_TPad.tagnum = -1 ;
  G__SplineFitDictLN_TLatex.tagnum = -1 ;
  G__SplineFitDictLN_TOnePadDisplay.tagnum = -1 ;
  G__SplineFitDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__SplineFitDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__SplineFitDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__SplineFitDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__SplineFitDictLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__SplineFitDictLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__SplineFitDictLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__SplineFitDictLN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__SplineFitDictLN_TMatrixTSymlEdoublegR.tagnum = -1 ;
  G__SplineFitDictLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__SplineFitDictLN_TMatrixTSparselEdoublegR.tagnum = -1 ;
  G__SplineFitDictLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__SplineFitDictLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__SplineFitDictLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__SplineFitDictLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__SplineFitDictLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__SplineFitDictLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__SplineFitDictLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__SplineFitDictLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__SplineFitDictLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__SplineFitDictLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__SplineFitDictLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__SplineFitDictLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__SplineFitDictLN_TBandedLE.tagnum = -1 ;
  G__SplineFitDictLN_TZigZag.tagnum = -1 ;
  G__SplineFitDictLN_TF1.tagnum = -1 ;
  G__SplineFitDictLN_TGraph.tagnum = -1 ;
  G__SplineFitDictLN_TGraphErrors.tagnum = -1 ;
  G__SplineFitDictLN_TMultiGraph.tagnum = -1 ;
  G__SplineFitDictLN_TH1D.tagnum = -1 ;
  G__SplineFitDictLN_TH2D.tagnum = -1 ;
  G__SplineFitDictLN_TH3D.tagnum = -1 ;
  G__SplineFitDictLN_TSpline3.tagnum = -1 ;
  G__SplineFitDictLN_KindOfFit.tagnum = -1 ;
  G__SplineFitDictLN_TSplineFit.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableSplineFitDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TString);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TFile);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TCanvas);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TTree);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TBranch);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TArrayD);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TH1);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TPoly3),sizeof(TPoly3),-1,61696,"Handling of 3rd order polynoms",G__setup_memvarTPoly3,G__setup_memfuncTPoly3);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_pairlEunsignedsPintcOintgR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TPad);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TLatex);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TOnePadDisplay),sizeof(TOnePadDisplay),-1,62720,"Class for displaying results on one pad",G__setup_memvarTOnePadDisplay,G__setup_memfuncTOnePadDisplay);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TMatrixTSymlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TMatrixTSparselEdoublegR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TMatrixTSparseDiaglEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TBandedLE),sizeof(TBandedLE),-1,62720,"CERN program F406 DBEQN translated to C++",G__setup_memvarTBandedLE,G__setup_memfuncTBandedLE);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TZigZag),sizeof(TZigZag),-1,63232,"Labelling of points such that point i+1 always near from point i",G__setup_memvarTZigZag,G__setup_memfuncTZigZag);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TF1);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TGraph);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TGraphErrors);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TMultiGraph);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TH1D);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TH2D);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TH3D);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TSpline3);
   G__get_linked_tagnum_fwd(&G__SplineFitDictLN_KindOfFit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SplineFitDictLN_TSplineFit),sizeof(TSplineFit),-1,63232,"General Handling of Spline fits",G__setup_memvarTSplineFit,G__setup_memfuncTSplineFit);
}
extern "C" void G__cpp_setupSplineFitDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupSplineFitDict()");
  G__set_cpp_environmentSplineFitDict();
  G__cpp_setup_tagtableSplineFitDict();

  G__cpp_setup_inheritanceSplineFitDict();

  G__cpp_setup_typetableSplineFitDict();

  G__cpp_setup_memvarSplineFitDict();

  G__cpp_setup_memfuncSplineFitDict();
  G__cpp_setup_globalSplineFitDict();
  G__cpp_setup_funcSplineFitDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncSplineFitDict();
  return;
}
class G__cpp_setup_initSplineFitDict {
  public:
    G__cpp_setup_initSplineFitDict() { G__add_setup_func("SplineFitDict",(G__incsetup)(&G__cpp_setupSplineFitDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initSplineFitDict() { G__remove_setup_func("SplineFitDict"); }
};
G__cpp_setup_initSplineFitDict G__cpp_setup_initializerSplineFitDict;

